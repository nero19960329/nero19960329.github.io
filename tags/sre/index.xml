<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wangzhao's site – SRE</title><link>/tags/sre/</link><description>Recent content in SRE on wangzhao's site</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 30 Aug 2022 00:01:00 +0800</lastBuildDate><atom:link href="/tags/sre/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Site Reliability Engineering - Week 2</title><link>/blog/sre_week2/</link><pubDate>Tue, 30 Aug 2022 00:01:00 +0800</pubDate><guid>/blog/sre_week2/</guid><description>
&lt;h2 id="course-link">Course Link&lt;/h2>
&lt;p>&lt;a href="https://www.coursera.org/learn/site-reliability-engineering-slos">https://www.coursera.org/learn/site-reliability-engineering-slos&lt;/a>&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a href="https://sre.google/">https://sre.google/&lt;/a>&lt;/p>
&lt;h2 id="sli-指标设计">SLI 指标设计&lt;/h2>
&lt;p>不好的设计：直接使用系统监视图表（比如 CPU 使用率、内存使用率等），或者使用内部状态监视图表等。&lt;/p>
&lt;p>理由是数据噪声大，而且通常和用户体验不呈直接影响的关系。&lt;/p>
&lt;p>好的 SLI 指标应具有以下几个特点：&lt;/p>
&lt;ol>
&lt;li>Has predictable relationship with user happiness
&lt;ul>
&lt;li>与用户幸福感具有可预测的关系&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Shows service is working as users expect it to
&lt;ul>
&lt;li>能展现服务是按照用户期望的方式在运行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Express as: good events / valid events
&lt;ul>
&lt;li>可以表达为 良好请求 除以 合法请求&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Aggregated over a long time horizon
&lt;ul>
&lt;li>在较长的时间窗口内聚合 SLI，以消除数据中的噪声&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="常用的-sli">常用的 SLI&lt;/h2>
&lt;p>两个常见场景如下：&lt;/p>
&lt;h3 id="request--response">Request / Response&lt;/h3>
&lt;p>请求 &amp;amp; 反馈场景。比如 HTTP, RPC 等。&lt;/p>
&lt;p>&lt;strong>Availability&lt;/strong>&lt;/p>
&lt;p>可用性。该 SLI 应设计为所有合法请求中&lt;strong>成功&lt;/strong>的比例。&lt;/p>
&lt;p>&lt;strong>Latency&lt;/strong>&lt;/p>
&lt;p>延迟。该 SLI 应设计为合法请求中&lt;strong>响应速度快于阈值&lt;/strong>的比例。&lt;/p>
&lt;p>&lt;strong>Quality&lt;/strong>&lt;/p>
&lt;p>服务质量。该 SLI 应设计为所有合法请求中&lt;strong>保持服务质量&lt;/strong>的比例。&lt;/p>
&lt;h3 id="data-processing">Data Processing&lt;/h3>
&lt;p>数据批量处理场景。&lt;/p>
&lt;p>&lt;strong>Freshness&lt;/strong>&lt;/p>
&lt;p>新鲜度。该 SLI 应设计为所有合法数据中&lt;strong>生成时间快于阈值&lt;/strong>的比例。&lt;/p>
&lt;p>通常需要时间戳来进行 SLI 指标计算。&lt;/p>
&lt;p>&lt;strong>Correctness&lt;/strong>&lt;/p>
&lt;p>正确度。该 SLI 应设计为所有合法数据中&lt;strong>正确&lt;/strong>的比例。&lt;/p>
&lt;p>需要注意，不能用处理数据的逻辑来判断数据是否正确。&lt;/p>
&lt;p>一种方法是可以使用 golden 输入输出对来对整体数据的正确程度进行估计。&lt;/p>
&lt;p>&lt;strong>Coverage&lt;/strong>&lt;/p>
&lt;p>覆盖程度。该 SLI 应设计为所有合法数据中&lt;strong>成功被处理&lt;/strong>的比例。&lt;/p>
&lt;p>类似于上一节中的可用性 SLI。&lt;/p>
&lt;p>&lt;strong>Throughput&lt;/strong>&lt;/p>
&lt;p>吞吐量。该 SLI 应设计为一段时间内&lt;strong>处理速度快于阈值的时间&lt;/strong>占比。&lt;/p>
&lt;h3 id="复杂场景下的建议">复杂场景下的建议&lt;/h3>
&lt;p>尽量减少 SLI 指标数，推荐 1~3 个。&lt;/p>
&lt;p>太多 SLI 并不能使得每个指标都那么直观地表现系统的可靠程度。并且大量 SLI 会增加它们之间发生冲突的可能。&lt;/p>
&lt;p>这并不意味着其他非 SLI 指标的监控图表也要同样被精简，它们可以帮助你来分析 SLI 低的原因。&lt;/p>
&lt;h3 id="同一种-sli-在多种场景下的聚合">同一种 SLI 在多种场景下的聚合&lt;/h3>
&lt;p>直接将分子之和除以分母之和可能在大部分情况下适用，但也存在一些问题，比如当某一种场景流量较小时，该场景的 SLI 可能会被平滑掉。&lt;/p>
&lt;p>可以使用更复杂一些的聚合策略，比如考虑流量相关的加权。&lt;/p>
&lt;h3 id="sli-在多种场景下的阈值定义">SLI 在多种场景下的阈值定义&lt;/h3>
&lt;p>以请求的 latency 举例，典型的场景划分可以是：&lt;/p>
&lt;ul>
&lt;li>被第三方依赖的请求：因为不知道第三方的调用方式，所以我们不一定要为他们负责，所以只要确保能用即可，比如 10s&lt;/li>
&lt;li>后台请求：较松的时间阈值，比如 5s
&lt;ul>
&lt;li>比如非人类用户（bot）等发出的请求&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>写请求：较紧的时间阈值，比如 1.5s
&lt;ul>
&lt;li>用户点提交按钮对反馈时间是比较宽容的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>交互请求：最紧，比如 400ms&lt;/li>
&lt;/ul>
&lt;h2 id="设置合理的-slo">设置合理的 SLO&lt;/h2>
&lt;h3 id="achieveable-slos">Achieveable SLOs&lt;/h3>
&lt;p>用户期望与过去的表现密切相关。&lt;/p>
&lt;p>如果你已有许多历史数据，则可以通过挖掘历史数据来设置 SLO。这种 SLO 被称之为可达到的 SLO。这种设置方式需要有一个假设，即假设用户对当前和过去的表现感到满意。&lt;/p>
&lt;h3 id="aspirational-slos">Aspirational SLOs&lt;/h3>
&lt;p>没有历史数据怎么办？如果当前服务的表现并不好或者非常好，怎么设置 SLO？&lt;/p>
&lt;p>根据业务需求指定的 SLO 被称之为理想 SLO。可以在服务上限之初，由产品团队来指定，之后可以动态调整。&lt;/p>
&lt;h3 id="持续优化">持续优化&lt;/h3>
&lt;p>首次设定 SLO 时，您需要观察、搜罗用户感受，并与您制定的 SLO 指标对比。&lt;/p>
&lt;p>记得要定时查看 SLO 是否还合适，建议每年查看一次。&lt;/p></description></item><item><title>Blog: Site Reliability Engineering - Week 1</title><link>/blog/sre_week1/</link><pubDate>Sat, 27 Aug 2022 16:36:00 +0800</pubDate><guid>/blog/sre_week1/</guid><description>
&lt;h2 id="course-link">Course Link&lt;/h2>
&lt;p>&lt;a href="https://www.coursera.org/learn/site-reliability-engineering-slos">https://www.coursera.org/learn/site-reliability-engineering-slos&lt;/a>&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a href="https://sre.google/">https://sre.google/&lt;/a>&lt;/p>
&lt;h2 id="slo-service-level-objective">SLO: Service Level Objective&lt;/h2>
&lt;p>服务水平目标。&lt;/p>
&lt;p>虽然系统的可靠性非常重要，但也不能因为保证系统可靠而不开发新 feature。&lt;/p>
&lt;p>所以需要平衡需求开发和保持系统可靠性是重要且具有挑战性的。&lt;/p>
&lt;p>SLO 可以用来判定可靠性和其他新 feature 的优先级。&lt;/p>
&lt;p>对于保持系统可靠运行的人来说，如果经常陷入&lt;strong>救火-&amp;gt;事件调查-&amp;gt;重复性维护&lt;/strong>循环，就会被拖住。&lt;/p>
&lt;p>此时，如果我们可以明确知道&lt;strong>可靠性目标&lt;/strong>是什么，就不必陷入这种被动响应的循环。&lt;/p>
&lt;p>这一点就需要 SLO 来介入，它可以回答&lt;strong>系统的可靠性水平是多少&lt;/strong>这个问题。从而给决策人员通过数据来判定此时此刻是应该开发新 feature 或者提高系统可靠性。&lt;/p>
&lt;h3 id="slo-三原则">SLO 三原则&lt;/h3>
&lt;ol>
&lt;li>Figuring out what you want to promise and to whom
&lt;ul>
&lt;li>搞明白要承诺什么，向谁承诺&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Figuring out the metrics you care about that make your service for reliability good
&lt;ul>
&lt;li>找出需要关心的指标，使得服务具有良好的可靠性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Deciding how much reliability is good enough
&lt;ul>
&lt;li>搞清楚上述指标达到多少就足够好了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="sla-service-level-agreements">SLA: Service Level Agreements&lt;/h2>
&lt;p>服务水平协议，是提供服务者与用户之间达成的可靠性协议。如果违反了 SLA，则提供服务者应当承担后果。&lt;/p>
&lt;p>一般来说，当提供服务者已经发现 SLA 被 break 时才收到警报，那么修复善后过程则非常贵。&lt;/p>
&lt;p>所以需要将 SLO 作为阈值，来提前预警 SLA 被 break 的风险。&lt;/p>
&lt;h3 id="sla-vs-slo">SLA vs SLO&lt;/h3>
&lt;p>SLA 是存在后果的对外承诺；SLO 则是为了满足客户期望的内部承诺。&lt;/p>
&lt;p>当系统的 SLO 被 break 时，就需要特别开始关注系统的可靠性与运行风险了。&lt;/p>
&lt;h2 id="happiness-test-幸福测试">Happiness Test: 幸福测试&lt;/h2>
&lt;p>用来帮助设定 SLO 的值。当勉强满足 SLO 时，客户是开心的；反之，客户则是不满的。&lt;/p>
&lt;p>挑战在于如何量化指标，如何衡量客户的幸福感。&lt;/p>
&lt;p>比如客户可能由很多群体组成，每个群体的关注点不同。&lt;/p>
&lt;h2 id="sli-service-level-indicators">SLI: Service Level Indicators&lt;/h2>
&lt;p>服务水平指标，是对用户体验的测量指标。最好是表达所有有效时间中良好的比例，比如过去一段时间内成功请求所占所有合法请求的比例。&lt;/p>
&lt;pre tabindex="0">&lt;code>SLI = good events / valid events
&lt;/code>&lt;/pre>&lt;h2 id="error-budgets-错误预算">Error Budgets: 错误预算&lt;/h2>
&lt;p>用于平滑地表示 break SLO 的程度。当 error budget 达到 100% 时，意味着 SLO 已经被 break 了，需要把可靠性放在第一优先级来看。&lt;/p>
&lt;p>当 error budget 还低时，就可以让新 feature 开发放在高优先的位置（可以采取更激进的发布），error budget 逐渐升高但还没超过 100% 时，就需要更保守的发布策略。&lt;/p>
&lt;p>对于某种特定类型的故障来说，可以定义如下指标：&lt;/p>
&lt;ul>
&lt;li>TTD: Time to detect
&lt;ul>
&lt;li>从用户受到影响到 SRE on-call 来解决问题的时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>TTR: Time to repair &amp;amp; Time to resolution
&lt;ul>
&lt;li>从发现问题到解决问题的时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>TTF: Time to failure
&lt;ul>
&lt;li>故障发生的频率&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>该故障对错误预算的预期影响 epsilon&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>epsilon = TTD * TTR * 故障影响因子% / TTF
&lt;/code>&lt;/pre>&lt;p>减少故障对错误预算的影响，可以从以下几点出发：&lt;/p>
&lt;ul>
&lt;li>降低 TTD
&lt;ul>
&lt;li>添加自动机制来捕获异常，比如自动警报、监视等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>降低 TTR
&lt;ul>
&lt;li>通过写文档，打 log 来让错误更容易被定位与解决&lt;/li>
&lt;li>做一些简便的工具用来排查问题&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>降低故障影响因子
&lt;ul>
&lt;li>限制特定更改在一段时间内可能影响的用户数量
&lt;ul>
&lt;li>基于百分比的更新，比如新功能仅推送给 0.1% 的用户，再一点点增加&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>服务在故障期间以降级模式运行，比如只允许读但不允许写&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>提高 TTF
&lt;ul>
&lt;li>自动将流量引导至远离发生故障的区域&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>做好问题定义：SLOs &amp;amp; SLIs&lt;/li>
&lt;li>让系统恰好达到它应有的稳定程度，但不必做到 100% 的极致&lt;/li>
&lt;li>错误预算是沟通的基础&lt;/li>
&lt;li>SLOs 不是永远不变的&lt;/li>
&lt;li>组织间需要较强的合作&lt;/li>
&lt;/ul></description></item></channel></rss>