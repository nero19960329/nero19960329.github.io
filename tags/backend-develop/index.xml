<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wangzhao's site – Backend Develop</title><link>/tags/backend-develop/</link><description>Recent content in Backend Develop on wangzhao's site</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 28 Mar 2023 18:06:00 +0800</lastBuildDate><atom:link href="/tags/backend-develop/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: What is HTTP? - Backend Developer Roadmap #2</title><link>/blog/backend-http-2/</link><pubDate>Tue, 28 Mar 2023 18:06:00 +0800</pubDate><guid>/blog/backend-http-2/</guid><description>
&lt;p>Roadmap: &lt;a href="https://roadmap.sh/backend">https://roadmap.sh/backend&lt;/a>&lt;/p>
&lt;p>本文隶属于 Roadmap 中的 &lt;code>Internet --&amp;gt; What is HTTP?&lt;/code>。&lt;/p>
&lt;p>原文：&lt;a href="https://cs.fyi/guide/http-in-depth">https://cs.fyi/guide/http-in-depth&lt;/a>&lt;/p>
&lt;h2 id="什么是-http">什么是 HTTP？&lt;/h2>
&lt;p>HTTP 是一个基于 TCP/IP 的应用层通信协议，标准化客户端和服务器之间的通信方式。它定义了互联网上请求和传输内容的方式。所谓应用层协议，是指它简单地抽象出了主机（客户端和服务器）之间的通信标准。HTTP 本身依赖于 TCP/IP，在客户端和服务器之间进行请求和响应。默认情况下，使用 TCP 端口 80，但也可以使用其他端口。HTTPS 使用端口 443。&lt;/p>
&lt;h2 id="http09---1991">HTTP/0.9 - 1991&lt;/h2>
&lt;p>HTTP/0.9 是 HTTP 的第一个版本，于 1991 年提出。它是迄今为止最简单的协议，只有一个叫做 GET 的方法。如果客户端需要访问服务器上的某个网页，它会发送以下简单请求：&lt;/p>
&lt;pre tabindex="0">&lt;code>GET /index.html
&lt;/code>&lt;/pre>&lt;p>然后服务器的响应会如下所示：&lt;/p>
&lt;pre tabindex="0">&lt;code>(response body)
(connection closed)
&lt;/code>&lt;/pre>&lt;p>也就是说，服务器会接收请求，响应 HTML 并在内容传输完成后立即关闭连接。HTTP/0.9 没有头部，只允许 GET 方法，响应的内容必须是 HTML。可以看出，该协议实际上只是后来版本的垫脚石。&lt;/p>
&lt;h2 id="http10---1996">HTTP/1.0 - 1996&lt;/h2>
&lt;p>HTTP/1.0 是 HTTP 的第一个版本，于 1996 年提出。与只能处理 HTML 响应的 HTTP/0.9 不同，HTTP/1.0 现在可以处理其他响应格式，例如图像、视频文件、纯文本或任何其他内容类型。它添加了更多的方法（例如 POST 和 HEAD），请求/响应格式发生了变化，HTTP 头被添加到请求和响应中，状态码被添加以标识响应，引入了字符集支持，多部分类型，授权，缓存，内容编码等。&lt;/p>
&lt;p>以下是 HTTP/1.0 请求和响应的示例：&lt;/p>
&lt;pre tabindex="0">&lt;code>GET / HTTP/1.0
Host: cs.fyi
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)
Accept: */*
&lt;/code>&lt;/pre>&lt;p>正如您所看到的，客户端除了请求之外，还发送了自己的个人信息、所需的响应类型等信息。而在 HTTP/0.9 中，客户端永远无法发送此类信息，因为没有头部。&lt;/p>
&lt;p>对于上述请求的示例响应可能如下所示：&lt;/p>
&lt;pre tabindex="0">&lt;code>HTTP/1.0 200 OK
Content-Type: text/plain
Content-Length: 137582
Expires: Thu, 05 Dec 1997 16:00:00 GMT
Last-Modified: Wed, 5 August 1996 15:55:28 GMT
Server: Apache 0.84
(response body)
(connection closed)
&lt;/code>&lt;/pre>&lt;p>在响应的最开始，有 HTTP/1.0（HTTP 后跟版本号），然后是状态码 200，后跟原因短语（或状态码的描述，如果您愿意）。&lt;/p>
&lt;p>在这个更新的版本中，请求和响应头仍然保持为 ASCII 编码，但响应正文可以是任何类型，例如图像、视频、HTML、纯文本或任何其他内容类型。因此，现在服务器可以向客户端发送任何内容类型；在介绍后不久，HTTP 中的“超文本”一词成为了误称。HMTP 或超媒体传输协议可能更有意义，但我想我们终身都会被这个名称困住。&lt;/p>
&lt;p>HTTP/1.0 的主要缺点之一是无法在一个连接中处理多个请求。也就是说，每当客户端需要从服务器获取东西时，它都必须打开一个新的 TCP 连接，并且在单个请求被满足后，连接将被关闭。对于任何下一个需求，它都必须在新连接上进行。为什么这是不好的？好吧，假设您访问一个具有 10 个图像、5 个样式表和 5 个 JavaScript 文件的网页，总计有 20 个项目需要在请求该网页时获取。由于服务器在请求已被满足后立即关闭连接，因此将有一系列 20 个单独的连接，其中每个项目都将在其单独的连接上依次服务。这种大量的连接会导致严重的性能损失，因为需要新的 TCP 连接会因三次握手和慢启动而造成重大的性能损失。&lt;/p>
&lt;h2 id="三次握手">三次握手&lt;/h2>
&lt;p>TCP 连接开始于三次握手，客户端和服务器在开始共享应用程序数据之前共享一系列数据包。&lt;/p>
&lt;ul>
&lt;li>SYN - 客户端选择一个随机数，例如 x，并将其发送到服务器。&lt;/li>
&lt;li>SYN ACK - 服务器通过向客户端发送一个由服务器选取的随机数（例如 y）和数字 x + 1 组成的 ACK 数据包来确认请求。&lt;/li>
&lt;li>ACK - 客户端递增从服务器接收到的数字 y 并发送一个数字为 y + 1 的 ACK 数据包。&lt;/li>
&lt;/ul>
&lt;p>完成三次握手后，客户端和服务器之间的数据共享可以开始。需要注意的是，客户端可能会在发送最后一个 ACK 数据包后立即开始发送应用程序数据，但服务器仍然必须等待接收到 ACK 数据包才能满足请求。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2023/03/28/ppyvz3n.png" alt="">&lt;/p>
&lt;p>然而，一些 HTTP/1.0 的实现尝试通过引入一个名为 Connection: keep-alive 的新头部来克服这个问题，该头部旨在告诉服务器“嘿服务器，不要关闭这个连接，我还需要它”。但它仍然没有得到广泛的支持，问题仍然存在。&lt;/p>
&lt;p>除了是无连接的之外，HTTP 还是一种无状态协议，即服务器不维护有关客户端的信息，因此每个请求都必须具有服务器自行满足请求所需的信息，而不与任何旧请求相关联。因此，这加剧了问题，即除了客户端必须打开大量连接之外，它还必须在连接上发送一些冗余数据，导致带宽使用增加。&lt;/p>
&lt;h2 id="http11---1997">HTTP/1.1 - 1997&lt;/h2>
&lt;p>HTTP/1.1 是 HTTP 的下一个版本，于 1999 年发布。相较于 HTTP/1.0，它有很多改进：&lt;/p>
&lt;ul>
&lt;li>新的 HTTP 方法被添加，包括 PUT、PATCH、OPTIONS、DELETE；&lt;/li>
&lt;li>在 HTTP/1.0 中，Host 头部不是必须的，但在 HTTP/1.1 中，它是必须的；&lt;/li>
&lt;li>持久连接：在 HTTP/1.0 中，每次连接只有一个请求，连接在请求被满足后立即关闭，这导致性能和延迟问题。HTTP/1.1 引入了持久连接，连接默认不关闭，允许多个连续请求。要关闭连接，请求中必须有头部 Connection: close。客户端通常在最后一个请求中发送此头部以安全地关闭连接；&lt;/li>
&lt;li>管道化：它还引入了管道化的支持，客户端可以在同一连接上向服务器发送多个请求，而无需等待服务器响应，服务器必须按照收到请求的相同顺序发送响应。但是，您可能会问客户端如何知道第一个响应下载完成并且下一个响应的内容开始。为了解决这个问题，必须存在 Content-Length 头部，客户端可以使用它来标识响应结束并且可以开始等待下一个响应。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>持久连接或管道化请求需要在响应中有 Content-Length 头部，以便客户端知道何时传输完成，可以发送下一个请求（按照正常顺序发送请求）或开始等待下一个响应（启用管道化）。但是，这种方法仍然存在问题。如果数据是动态的，服务器无法提前找到内容长度怎么办？在这种情况下，持久连接无法发挥作用！为了解决这个问题，HTTP/1.1 引入了分块编码。在这种情况下，服务器可以省略 Content-Length，而采用分块编码（稍后详细介绍）。但是，如果两种方法都不可用，则必须在请求结束时关闭连接。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Chunked Transfers 是一种传输方式，通常用于传输动态内容。在传输开始时，由于服务器无法确定 Content-Length，因此它可能会分块（每个块为一小部分）发送内容，并在发送每个块时添加 Content-Length。当所有块都被发送完毕，即整个传输完成时，服务器会发送一个空块，即 Content-Length 设置为零，以便通知客户端传输已完成。为了通知客户端使用了 Chunked Transfers，服务器会包括头部 Transfer-Encoding: chunked。&lt;/li>
&lt;li>HTTP/1.1 不同于仅有基本认证的 HTTP/1.0，它包括摘要认证和代理认证&lt;/li>
&lt;li>缓存&lt;/li>
&lt;li>字节范围&lt;/li>
&lt;li>字符集&lt;/li>
&lt;li>语言协商&lt;/li>
&lt;li>客户端cookies&lt;/li>
&lt;li>增强的压缩支持&lt;/li>
&lt;li>新的状态码&lt;/li>
&lt;li>&amp;hellip;等等&lt;/li>
&lt;/ul>
&lt;p>HTTP/1.1 在 1999 年发布，成为标准多年。虽然它相对于前身做了很多改进，但随着 Web 技术的日新月异，HTTP/1.1 开始显得有些过时。如今，加载网页比以往任何时候都更加资源密集。一个简单的网页需要打开超过 30 个连接。虽然 HTTP/1.1 有持久连接，但为什么还需要这么多连接呢？原因是，在 HTTP/1.1 中，任何时刻只能有一个未完成的连接。HTTP/1.1 尝试通过引入管道化来解决这个问题，但它并没有完全解决，因为头部阻塞会阻止慢速或重量级请求，一旦请求被卡在管道中，它将不得不等待下一个请求的响应。为了克服 HTTP/1.1 的这些缺点，开发人员开始实现各种解决方法，例如使用 spritesheets、在 CSS 中编码图像、单个巨大的 CSS/JavaScript 文件、域分片等。&lt;/p>
&lt;h2 id="spdy---2009">SPDY - 2009&lt;/h2>
&lt;p>2009 年，Google 开始尝试使用替代协议来加速网络并改善 Web 安全性，同时减少 Web 页面的延迟。他们宣布了 SPDY 协议。&lt;/p>
&lt;blockquote>
&lt;p>SPDY 是 Google 的商标，不是缩写。&lt;/p>
&lt;/blockquote>
&lt;p>人们发现，如果我们不断增加带宽，网络性能会在开始时增加，但在没有太多性能增益的时候会出现瓶颈。但是，如果您以同样的方式处理延迟，即如果我们不断降低延迟，就会有不断的性能增益。这是 SPDY 的性能提升的核心思想：降低延迟以提高网络性能。&lt;/p>
&lt;blockquote>
&lt;p>对于那些不知道区别的人，延迟是延迟，即数据在源和目的地之间传输需要多长时间（以毫秒为单位），带宽是每秒传输的数据量（每秒比特数）。&lt;/p>
&lt;/blockquote>
&lt;p>SPDY 的功能包括复用、压缩、优先级、安全等。我不会详细介绍 SPDY，因为当我们进入下一节 HTTP/2 的细节时，您将会了解到它的主要灵感来源于 SPDY。&lt;/p>
&lt;p>SPDY 实际上并没有试图替换 HTTP；它是 HTTP 上的翻译层，在应用程序层存在并在将请求发送到线上之前修改请求。它开始成为事实标准，并且大多数浏览器开始实现它。&lt;/p>
&lt;p>2015 年，在 Google，他们不想有两个竞争标准，因此他们决定将其合并到 HTTP 中，同时推出 HTTP/2，废弃 SPDY。&lt;/p>
&lt;h2 id="http2---2015">HTTP/2 - 2015&lt;/h2>
&lt;p>HTTP/2 的设计旨在进行内容的低延迟传输。从旧版本 HTTP/1.1 的关键特性或区别来看，HTTP/2 采用了以下特性：&lt;/p>
&lt;ul>
&lt;li>使用二进制代替文本&lt;/li>
&lt;li>多路复用 - 在单个连接上进行多个异步 HTTP 请求&lt;/li>
&lt;li>使用 HPACK 进行报头压缩&lt;/li>
&lt;li>服务器推送 - 为单个请求提供多个响应&lt;/li>
&lt;li>请求优先级&lt;/li>
&lt;li>安全性&lt;/li>
&lt;/ul>
&lt;h3 id="二进制协议">二进制协议&lt;/h3>
&lt;p>HTTP/2 试图通过将其变为二进制协议来解决 HTTP/1.x 中存在的延迟增加问题。作为二进制协议，它更易于解析，但与 HTTP/1.x 不同，它不再可读。HTTP/2 的主要构建块是帧和流&lt;/p>
&lt;p>&lt;strong>帧和流&lt;/strong>
HTTP 消息现在由一个或多个帧组成。有一个 HEADERS 帧用于元数据，一个 DATA 帧用于有效负载，还有几种其他类型的帧（HEADERS、DATA、RST_STREAM、SETTINGS、PRIORITY 等），你可以通过 HTTP/2 规范检查。&lt;/p>
&lt;p>每个 HTTP/2 请求和响应都被赋予一个唯一的流 ID，并被划分为帧。帧只是二进制数据块。一组帧称为一个流。每个帧都有一个流 ID，用于标识它所属的流，每个帧都有一个公共头。另外，除了流 ID 是唯一的，值得一提的是，任何由客户端发起的请求都使用奇数，服务器的响应具有偶数流 ID。&lt;/p>
&lt;p>除了 HEADERS 和 DATA 之外，我认为值得在此提到的另一种帧类型是 RST_STREAM，它是一种特殊的帧类型，用于中止某个流，即客户端可以发送此帧，让服务器知道我不再需要此流。在 HTTP/1.1 中，使服务器停止向客户端发送响应的唯一方法是关闭连接，这导致了延迟增加，因为必须为任何连续请求打开新连接。而在 HTTP/2 中，客户端可以使用 RST_STREAM 并停止接收特定流，而连接仍将保持打开状态，其他流仍将继续播放。&lt;/p>
&lt;h3 id="多路复用">多路复用&lt;/h3>
&lt;p>HTTP/2 现在是二进制协议，正如我上面所说，它使用帧和流来请求和响应，一旦打开 TCP 连接，所有流都通过同一连接异步发送，而不需要打开任何其他连接。反过来，服务器也以相同的异步方式响应，响应没有顺序，客户端使用分配的流 ID 来标识特定数据包属于哪个流。这也解决了 HTTP/1.x 中存在的阻塞问题，即客户端不必等待需要时间的请求，其他请求仍在处理中。&lt;/p>
&lt;h3 id="报头压缩">报头压缩&lt;/h3>
&lt;p>HTTP/2 引入了报头压缩来优化发送的头部。该功能是在一个独立的 RFC 中实现的，旨在特别优化发送的头部。其要点在于，当我们始终从同一客户端访问服务器时，我们会反复发送许多冗余数据在头部中，有时可能会有增加头部大小的 cookie，导致带宽使用和延迟增加。为了克服这个问题，HTTP/2 引入了报头压缩。&lt;/p>
&lt;p>与请求和响应不同，头部不是以 gzip 或 compress 等格式压缩的，而是采用了不同的头部压缩机制。该机制使用 Huffman 编码将文字值编码，并由客户端和服务器维护头部表。客户端和服务器都会在随后的请求中忽略所有重复的头部（例如用户代理等），并使用双方维护的头部表引用它们。&lt;/p>
&lt;p>在谈论头部时，让我在这里添加一个信息，即头部仍然与 HTTP/1.1 中的头部相同，除了添加了一些伪头部，例如 &lt;code>:method&lt;/code>、&lt;code>:scheme&lt;/code>、&lt;code>:host&lt;/code> 和 &lt;code>:path&lt;/code>。&lt;/p>
&lt;h3 id="服务器推送">服务器推送&lt;/h3>
&lt;p>HTTP/2 的另一个巨大的功能是服务器推送，在这种情况下，服务器知道客户端将要请求某个资源，因此可以将其推送到客户端，而无需客户端请求。例如，假设浏览器加载一个网页，它解析整个页面以找出必须从服务器加载的远程内容，然后发送相应的请求以获取该内容。&lt;/p>
&lt;p>服务器推送允许服务器通过推送它知道客户端将要请求的数据来减少往返次数。它是通过发送称为PUSH_PROMISE 的特殊帧来完成的，该帧通知客户端：“嘿，我要将此资源发送给你！不要请求它。” PUSH_PROMISE 帧与引发推送的流关联，并包含承诺的流ID，即服务器将推送的资源所在的流。&lt;/p>
&lt;h3 id="请求优先级">请求优先级&lt;/h3>
&lt;p>客户端可以在打开流的头部帧中包含优先级信息，以为流分配优先级。在任何其他时间，客户端都可以发送 PRIORITY 帧来更改流的优先级。&lt;/p>
&lt;p>如果没有分配任何优先级信息，则服务器异步处理请求，即不按顺序处理请求。如果为流分配了优先级，则服务器根据此优先级信息决定需要分配多少资源来处理哪个请求。&lt;/p>
&lt;h3 id="安全性">安全性&lt;/h3>
&lt;p>在 HTTP/2 的安全性问题上进行了广泛的讨论，是否应该强制要求使用 TLS。最终决定不强制要求，但大多数供应商表示，只有在使用 TLS 时才支持 HTTP/2。因此，尽管 HTTP/2 不需要加密，但从某种程度上来说，它已经默认成为强制要求。当使用 TLS 实现 HTTP/2 时，会有一些要求，例如必须使用 TLS 版本 1.2 或更高版本，必须具有一定水平的最小密钥大小，需要使用临时密钥等。&lt;/p>
&lt;h2 id="http3---2022">HTTP/3 - 2022&lt;/h2>
&lt;p>HTTP/3 是 HTTP 的下一个版本。HTTP/3 是基于 QUIC 的协议。QUIC 是一个建立在 UDP 之上的传输层协议，旨在取代 TCP。它是一个多路复用、安全、基于流的协议，旨在降低延迟并提高性能。它是 TCP 和 HTTP/2 的继承者。&lt;/p>
&lt;p>QUIC 是一个多路复用、安全、基于流的协议，旨在降低延迟并提高性能。它是 TCP 和 HTTP/2 的继承者。&lt;/p>
&lt;h3 id="多路复用-1">多路复用&lt;/h3>
&lt;p>QUIC 是一种多路复用协议，意味着可以在单个连接上发送多个流。这类似于 HTTP/2，其中可以在单个连接上发送多个流。然而，与 HTTP/2 不同，QUIC 不仅限于 HTTP。它可以用于任何需要可靠、有序和容错的流传输的应用程序。&lt;/p>
&lt;h3 id="基于流">基于流&lt;/h3>
&lt;p>QUIC 是基于流的协议，这意味着数据以流的形式发送。每个流都由唯一的流 ID 标识。QUIC 使用单个流来双向发送数据。这类似于 HTTP/2，其中每个流由唯一的流 ID 标识，并且每个流是双向的。&lt;/p>
&lt;h3 id="不可靠数据报文">不可靠数据报文&lt;/h3>
&lt;p>QUIC 使用不可靠的数据报来发送数据。这意味着 QUIC 不能保证数据将被传送到接收者。不过，QUIC 保证数据将按照发送的顺序传送。这类似于使用 UDP，其中数据以数据报的形式发送，而数据报不能保证会传送到接收者。&lt;/p>
&lt;h3 id="连接迁移">连接迁移&lt;/h3>
&lt;p>QUIC 支持连接迁移，这意味着 QUIC 连接可以从一个 IP 地址迁移到另一个 IP 地址。这类似于 TCP，其中 TCP 连接可以从一个 IP 地址迁移到另一个 IP 地址。&lt;/p>
&lt;h3 id="丢失恢复">丢失恢复&lt;/h3>
&lt;p>QUIC 使用丢失恢复来从数据包丢失中恢复。QUIC 使用拥塞控制和丢失恢复的组合来从数据包丢失中恢复。这类似于 TCP，TCP 使用拥塞控制和丢失恢复的组合来从数据包丢失中恢复。&lt;/p>
&lt;h3 id="拥塞控制">拥塞控制&lt;/h3>
&lt;p>QUIC 使用拥塞控制来控制网络上数据发送的速率。QUIC 使用拥塞控制和丢包恢复相结合来从数据包丢失中恢复。这类似于 TCP，其中 TCP 使用拥塞控制和丢失恢复相结合来从数据包丢失中恢复。&lt;/p>
&lt;h3 id="握手">握手&lt;/h3>
&lt;p>QUIC 使用握手来在客户端和服务器之间建立安全连接。QUIC 使用 TLS 1.3 在客户端和服务器之间建立安全连接。这类似于 HTTP/2，其中使用 TLS 1.2 在客户端和服务器之间建立安全连接。&lt;/p>
&lt;h3 id="报头压缩-1">报头压缩&lt;/h3>
&lt;p>QUIC 使用头部压缩来减小头部的大小。QUIC 使用 HPACK 来压缩头部。这与 HTTP/2 类似，其中使用 HPACK 来压缩头部。&lt;/p>
&lt;h3 id="安全性-1">安全性&lt;/h3>
&lt;p>QUIC 使用 TLS 1.3 在客户端和服务器之间建立安全连接。这类似于 HTTP/2，其中使用 TLS 1.2 在客户端和服务器之间建立安全连接。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>在本文中，我们讨论了 HTTP/1.1，HTTP/2 和 HTTP/3。我们还讨论了 HTTP/1.1 和 HTTP/2 以及HTTP/2 和 HTTP/3 之间的区别。希望您会发现这篇文章有所帮助。&lt;/p></description></item><item><title>Blog: How does the internet work? - Backend Developer Roadmap #1</title><link>/blog/backend-internet-1/</link><pubDate>Mon, 27 Mar 2023 18:27:00 +0800</pubDate><guid>/blog/backend-internet-1/</guid><description>
&lt;p>Roadmap: &lt;a href="https://roadmap.sh/backend">https://roadmap.sh/backend&lt;/a>&lt;/p>
&lt;p>本文隶属于 Roadmap 中的 &lt;code>Internet --&amp;gt; How does the internet work?&lt;/code>。&lt;/p>
&lt;p>原文：https://cs.fyi/guide/how-does-internet-work&lt;/p>
&lt;p>本文介绍了互联网的基础知识，包括互联网的定义、工作原理、基本概念、术语和常用协议。作为开发人员，了解互联网是如何工作的，以及如何利用其强大的互联性和连接性来构建高效、安全且可扩展的应用和服务是非常重要的。&lt;/p>
&lt;h2 id="internet-介绍">Internet 介绍&lt;/h2>
&lt;p>互联网是由许多网络组成的巨大网络，最初是为了应对核战争而建立的。如今，它已经成为现代生活的重要组成部分，被全球数十亿人用于访问信息、与亲友交流、开展业务等。作为开发人员，了解互联网如何工作，以及它的各种技术和协议是非常重要的。&lt;/p>
&lt;h2 id="internet-工作原理概要">Internet 工作原理概要&lt;/h2>
&lt;p>互联网通过一系列标准化的协议连接设备和计算机系统。这些协议定义了设备之间如何交换信息，并确保数据可靠、安全地传输。&lt;/p>
&lt;p>互联网的核心是由相互连接的路由器构成的全球网络，负责在不同设备和系统之间传输流量。当你发送数据时，它被分成小包并从你的设备发送到路由器。路由器检查数据包并将其转发到路径上的下一个路由器，重复此过程，直到数据包到达最终目的地。&lt;/p>
&lt;p>为了确保数据包正确发送和接收，互联网使用了各种协议，包括网络协议(IP)和传输控制协议(TCP)。其中，IP 协议负责将数据包路由到正确的目的地，而 TCP 协议则确保数据包可靠地按正确顺序传输。&lt;/p>
&lt;p>此外，还有许多其他技术和协议用于实现互联网上的通信和数据交换，包括域名系统(DNS)、超文本传输协议(HTTP)和安全套接字层/传输层安全协议(SSL/TLS)。作为开发人员，了解这些不同技术和协议如何协同工作，实现互联网上的通信和数据交换是非常重要的。&lt;/p>
&lt;h2 id="基本概念术语">基本概念术语&lt;/h2>
&lt;p>了解互联网的基本概念和术语是开发互联网应用和服务的关键，以下是一些需要了解的术语：&lt;/p>
&lt;ul>
&lt;li>Packet：在互联网上传输的小数据单元。&lt;/li>
&lt;li>Router：在不同网络之间传输数据包的设备。&lt;/li>
&lt;li>IP Address：分配给网络上每个设备的唯一标识符，用于将数据路由到正确的目的地。&lt;/li>
&lt;li>Domain Name：一个可读的人类可读的名称，用于标识网站，例如 &lt;a href="http://google.com/">google.com&lt;/a>。&lt;/li>
&lt;li>DNS：域名系统负责将域名转换为 IP 地址。&lt;/li>
&lt;li>HTTP：超文本传输协议，用于在客户端（如 Web 浏览器）和服务器（如网站）之间传输数据。&lt;/li>
&lt;li>HTTPS：HTTP 的加密版本，用于在客户端和服务器之间提供安全通信。&lt;/li>
&lt;li>SSL/TLS：安全套接字层和传输层安全协议，用于在互联网上提供安全通信。&lt;/li>
&lt;/ul>
&lt;h2 id="internet-中协议的角色">Internet 中协议的角色&lt;/h2>
&lt;p>协议在启用互联网通信和数据交换方面扮演着至关重要的角色。协议是一组规则和标准，它们定义了设备和系统之间信息如何交换。&lt;/p>
&lt;p>互联网通信中使用许多不同的协议，包括 Internet Protocol (IP)，Transmission Control Protocol (TCP)，User Datagram Protocol (UDP)，Domain Name System (DNS) 等。&lt;/p>
&lt;p>IP 负责将数据包路由到正确的目的地，而 TCP 和 UDP 确保数据包可靠和高效地传输。DNS 用于将域名转换为IP地址，而 HTTP 用于在客户端和服务器之间传输数据。&lt;/p>
&lt;p>使用标准化协议的一个关键好处是它们允许来自不同制造商和供应商的设备和系统之间无缝通信。例如，一个由一家公司开发的 Web 浏览器可以与另一家公司开发的 Web 服务器通信，只要它们都遵守 HTTP 协议。&lt;/p>
&lt;p>作为开发人员，了解互联网通信中使用的各种协议以及它们如何协同工作实现数据和信息在互联网上的传输是非常重要的。&lt;/p>
&lt;h2 id="使用-ssltls-加密-internet-连接">使用 SSL/TLS 加密 Internet 连接&lt;/h2>
&lt;p>SSL/TLS 是一种用于加密互联网传输数据的协议，通常用于为 Web 浏览器、电子邮件客户端和文件传输程序等应用程序提供安全连接。使用 SSL/TLS 时，需要理解以下几个关键概念：&lt;/p>
&lt;ul>
&lt;li>Certificates: SSL/TLS 证书用于建立客户端和服务器之间的信任。它们包含有关服务器身份的信息，并由受信任的第三方（证书颁发机构）签名以验证其真实性。&lt;/li>
&lt;li>Handshake: 在 SSL/TLS 握手过程中，客户端和服务器交换信息，以协商安全连接的加密算法和其他参数。&lt;/li>
&lt;li>Encryption: 一旦建立安全连接，数据将使用约定的算法进行加密，并且可以在客户端和服务器之间安全传输。&lt;/li>
&lt;/ul>
&lt;p>构建基于互联网的应用程序和服务时，了解 SSL/TLS 的工作原理，并确保您的应用程序在传输敏感数据（例如登录凭据、付款信息和其他个人数据）时使用 SSL/TLS，以及确保您为服务器获取和维护有效的 SSL/TLS 证书，并按照配置和保护 SSL/TLS 连接的最佳实践进行操作，从而可以帮助保护用户数据，确保应用程序在互联网上的通信的完整性和保密性。&lt;/p>
&lt;h2 id="未来新兴趋势和技术">未来：新兴趋势和技术&lt;/h2>
&lt;p>作为开发人员，了解互联网的最新发展趋势和技术非常重要，以下是一些正在塑造互联网未来的新兴技术和趋势：&lt;/p>
&lt;ul>
&lt;li>5G：是最新一代的移动网络技术，具有比以前更快的速度、更低的延迟和更大的容量。它预计将使新的用例和应用程序成为可能，例如自动驾驶汽车和远程手术。&lt;/li>
&lt;li>物联网：指连接到互联网并可以交换数据的物理设备、车辆、家用电器和其他物体的网络。随着物联网的不断增长，它预计将颠覆医疗保健、交通运输和制造等行业。&lt;/li>
&lt;li>人工智能：机器学习和自然语言处理等人工智能技术已经被用于推动广泛的应用和服务，从语音助手到欺诈检测。随着人工智能的不断进步，它预计将使新的用例成为可能，并改变医疗保健、金融和教育等行业。&lt;/li>
&lt;li>区块链：是一种分布式账本技术，可以实现安全的去中心化交易。它正在被用于支持从加密货币到供应链管理等广泛的应用程序。&lt;/li>
&lt;li>边缘计算：指在网络的边缘而不是在集中式数据中心中处理和存储数据。它预计将使新的用例和应用程序成为可能，如实时分析和低延迟应用程序。&lt;/li>
&lt;/ul>
&lt;p>通过了解这些和其他新兴趋势和技术，您可以确保您的应用程序和服务是基于最新功能构建的，并为您的用户提供最佳体验。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>这篇文章介绍了互联网的基本概念，包括：&lt;/p>
&lt;ul>
&lt;li>互联网是由连接在一起的计算机组成的全球网络，使用标准化的通信协议交换数据。&lt;/li>
&lt;li>互联网通过将设备和计算机系统使用标准化协议（如 IP 和 TCP）连接在一起工作。&lt;/li>
&lt;li>互联网的核心是由相互连接的路由器构成的全球网络，负责在不同设备和系统之间传输流量。&lt;/li>
&lt;li>基本概念和术语包括分组、路由器、IP地址、域名、DNS、HTTP、HTTPS 和 SSL/TLS。&lt;/li>
&lt;/ul>
&lt;p>协议在启用互联网通信和数据交换方面扮演着至关重要的角色。协议是一组规则和标准，它们定义了设备和系统之间信息如何交换。使用标准化协议的一个关键好处是它们允许来自不同制造商和供应商的设备和系统之间无缝通信。希望这篇文章对您有帮助。&lt;/p></description></item></channel></rss>