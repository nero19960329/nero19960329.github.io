<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wangzhao's site – Blog</title><link>/blog/</link><description>Recent content in Blog on wangzhao's site</description><generator>Hugo -- gohugo.io</generator><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Nginx &amp; Consul Usage</title><link>/blog/nginx-consul/</link><pubDate>Fri, 24 Mar 2023 22:29:00 +0800</pubDate><guid>/blog/nginx-consul/</guid><description>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>本文介绍了如何使用 Nginx &amp;amp; Consul，涉及到的方面不是很全面，只介绍了其中一部分使用方式。&lt;/p>
&lt;h3 id="nginx">Nginx&lt;/h3>
&lt;p>Nginx 是一种 Web 服务器软件，它可以处理客户端请求并将其转发到后端服务。它还可以充当反向代理，将请求路由到不同的服务上。Nginx 通常用于构建高性能、高可扩展性的 Web 应用程序和 API。&lt;/p>
&lt;h3 id="consul">Consul&lt;/h3>
&lt;p>Consul 是一个服务发现和配置工具，用于管理分布式应用程序和服务。它提供了一个可靠的方式来发现和注册服务，并允许服务之间进行通信。Consul 还提供了一个 Web UI，用于查看当前注册的服务和健康状况。&lt;/p>
&lt;h2 id="docker-镜像准备">Docker 镜像准备&lt;/h2>
&lt;p>下载 Consul 的二进制文件：&lt;a href="https://developer.hashicorp.com/consul/downloads">https://developer.hashicorp.com/consul/downloads&lt;/a>，得到 &lt;code>consul&lt;/code> 和 &lt;code>consul-template&lt;/code>。&lt;/p>
&lt;p>编写 &lt;code>entrypoint.sh&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 启动 Nginx 服务器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nginx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 启动 Consul agent 服务器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># -server: 设置 Consul 服务器而不是客户端&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># -bootstrap-expect: 开始启动集群之前期望的服务器数量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># -data-dir: 存储 Consul 数据的目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># -bind: 绑定的 IP 地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># -client: 绑定客户端接口的 IP 地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># -ui: 启用 Web UI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>consul agent -server -bootstrap-expect &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> -data-dir /consul -bind 0.0.0.0 -client 0.0.0.0 -ui &lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 启动 consul-template，当服务配置发生更改时重新加载 Nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># -consul-addr: 要使用的 Consul agent 的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># -template: 指定模板的源和目标文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># : 指定模板更改时要运行的命令&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>consul-template -consul-addr 127.0.0.1:8500 -template /root/consul.template:/etc/nginx/conf.d/service.conf:&lt;span style="color:#4e9a06">&amp;#34;nginx -s reload&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编写 &lt;code>Dockerfile&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 本 Dockerfile 设置 nginx-consul&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 它会复制必要的文件并运行入口脚本&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 入口脚本启动 nginx、Consul agent 和 consul-template&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 它还指定了 consul-template 命令，以便在服务配置更改时重新加载 nginx&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 请注意，此 Dockerfile 基于 nginx:stable-alpine&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">FROM&lt;/span>&lt;span style="color:#4e9a06"> nginx:stable-alpine&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">USER&lt;/span>&lt;span style="color:#4e9a06"> root&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 将 consul 和 consul-template 二进制文件复制到容器中&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">COPY&lt;/span> consul /usr/bin&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">COPY&lt;/span> consul-template /usr/bin&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 将 entrypoint.sh 复制到容器中&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">COPY&lt;/span> entrypoint.sh /root/&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 为 Consul 数据创建目录&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">RUN&lt;/span> mkdir /consul&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 将工作目录设置为 /templates&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#4e9a06"> /templates&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 指定容器启动时要运行的入口脚本&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">ENTRYPOINT&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/root/entrypoint.sh&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>构建镜像：&lt;code>docker build -f Dockerfile . -t nginx-consul&lt;/code>&lt;/p>
&lt;h2 id="consul-模板">Consul 模板&lt;/h2>
&lt;p>Consul Template 是一个开源工具，用于在 Consul 中定义的键值对更改时自动更新应用程序配置文件。它允许您使用一组简单的模板语言来生成配置文件，并使用 Consul 的服务发现功能以及 Consul 配置更改通知机制来自动更新它们。这使得在使用 Consul 时更容易自动化应用程序配置管理。&lt;/p>
&lt;p>下面是一个样例模板文件，名为&lt;code>consul.tmpl&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{range services}} {{$name := .Name}} {{$service := service .Name}}
upstream {{$name}} {
zone upstream-{{$name}} 64k;
{{range $service}}server {{.Address}}:{{.Port}} max_fails=3 fail_timeout=60 weight=1;
{{else}}server 127.0.0.1:65535; # force a 502{{end}}
} {{end}}
server {
listen 80 default_server;
location / {
root /usr/share/nginx/html/;
index index.html;
}
location /stub_status {
stub_status;
}
{{range services}} {{$name := .Name}}
location /{{$name}} {
proxy_pass http://{{$name}};
}
{{end}}
}
&lt;/code>&lt;/pre>&lt;p>上述模板文件用于生成 Nginx 的配置文件。在 &lt;code>upstream&lt;/code> 部分，它定义了从 Consul 中发现的服务的列表，并将它们作为一组后端服务器添加到 Nginx 的 &lt;code>upstream&lt;/code> 块中。每个服务都有一个唯一的名字，在模板中使用 &lt;code>{{$name := .Name}}&lt;/code> 定义。然后，使用 &lt;code>service .Name&lt;/code> 获取该服务的详细信息，例如地址和端口号。对于每个服务，都会创建一个 &lt;code>server&lt;/code> 行，其中包括该服务的地址和端口号。如果 Consul 中没有找到该服务，则会添加一个带有 502 错误的服务器行，例如：&lt;code>server 127.0.0.1:65535; # force a 502&lt;/code>。&lt;/p>
&lt;h2 id="运行-consul">运行 Consul&lt;/h2>
&lt;p>在名为 consul-hostname 的机器上，运行如下指令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --rm --name consul &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -p 19000:80 &lt;span style="color:#4e9a06">\ &lt;/span> &lt;span style="color:#8f5902;font-style:italic"># nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -p 19001:8500 &lt;span style="color:#4e9a06">\ &lt;/span> &lt;span style="color:#8f5902;font-style:italic"># consul&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --volume &lt;span style="color:#000">$PWD&lt;/span>/consul.tmpl:/root/consul.template &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> -v &lt;span style="color:#000">$PWD&lt;/span>/data:/consul &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> nginx-consul
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在运行完上述指令后，能够在 &lt;code>http://localhost:19000&lt;/code> 上访问 Nginx。还可以在 &lt;code>http://localhost:19001&lt;/code> 上访问 Consul 的 Web UI，以查看当前注册的服务和健康状况。&lt;/p>
&lt;h2 id="注册服务">注册服务&lt;/h2>
&lt;p>假设我们使用 Python+FastAPI 实现了一个简单的 HTTP 服务，并在 &lt;code>server-hostname&lt;/code> 的 7000 端口上运行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">fastapi&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">FastAPI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">app&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">FastAPI&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 简单的 HTTP 服务&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5c35cc;font-weight:bold">@app.get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/simple_http&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">simple_http&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;message&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello from &lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">app&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># 健康检查服务&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5c35cc;font-weight:bold">@app.get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/health&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">health&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;status&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ok&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行如下指令可以将该服务注册到 Consul 上：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --request PUT &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --data @register.json &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> http://&amp;lt;consul-hostname&amp;gt;:19001/v1/agent/service/register
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>register.json&lt;/code> :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;Name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;simple_http&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;ID&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;simple-1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;Address&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;serve-hostname&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;Port&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行如下指令可以将该服务的健康检查注册到 Consul 上：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --request PUT &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --data @health.json &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> http://&amp;lt;consul&amp;gt;:19001/v1/agent/check/register
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>health.json&lt;/code> :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;Name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;health check simple1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;ID&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;check:simple1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;Interval&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;5s&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;HTTP&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http://&amp;lt;serve-hostname&amp;gt;:7000/health&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;ServiceID&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;simple-1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;DeregisterCriticalServiceAfter&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;1m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>health.json&lt;/code> 文件中的设置表示健康检查的详细信息。以下是各个字段的含义：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Name&lt;/code>: 健康检查的名称，用于标识检查的目的。&lt;/li>
&lt;li>&lt;code>ID&lt;/code>: 健康检查的 ID，必须是唯一的。&lt;/li>
&lt;li>&lt;code>Interval&lt;/code>: 指定 Consul 运行健康检查的时间间隔。在这个例子中，健康检查每 5 秒运行一次。&lt;/li>
&lt;li>&lt;code>HTTP&lt;/code>: 指定要进行健康检查的 HTTP 端点。在这个例子中，检查 &lt;code>/health&lt;/code> 端点。&lt;/li>
&lt;li>&lt;code>ServiceID&lt;/code>: 指定要检查的服务的 ID。在这个例子中，它是 &lt;code>simple-1&lt;/code>，与注册服务的 ID 相同。&lt;/li>
&lt;li>&lt;code>DeregisterCriticalServiceAfter&lt;/code>: 指定 Consul 在服务停止响应多少时间后将其从注册表中注销。在这个例子中，Consul 将在服务停止响应 1 分钟后注销。&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>本文介绍了如何使用 Nginx 和 Consul 管理分布式应用程序和服务。&lt;/p>
&lt;p>使用 Nginx，我们可以处理客户端请求并将其转发到后端服务。Consul 则为我们提供了可靠的方式来发现和注册服务。&lt;/p>
&lt;p>使用 Consul Template，我们可以自动更新应用程序配置文件，从而更好地管理整个系统。&lt;/p>
&lt;p>通过本文介绍的实例，我们可以将一个简单的 HTTP 服务注册到 Consul 上，以实现更好的管理分布式应用程序和服务。&lt;/p>
&lt;p>总的来说，使用 Nginx 和 Consul 可以提高分布式系统的可靠性和可维护性，使系统更加健壮和高效。&lt;/p></description></item><item><title>Blog: Site Reliability Engineering - Week 3 &amp; 4</title><link>/blog/sre_week3_4/</link><pubDate>Sat, 03 Sep 2022 16:41:00 +0800</pubDate><guid>/blog/sre_week3_4/</guid><description>
&lt;h2 id="course-link">Course Link&lt;/h2>
&lt;p>&lt;a href="https://www.coursera.org/learn/site-reliability-engineering-slos">https://www.coursera.org/learn/site-reliability-engineering-slos&lt;/a>&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a href="https://sre.google/">https://sre.google/&lt;/a>&lt;/p>
&lt;h2 id="developing-sli--slo-in-4-steps">Developing SLI / SLO in 4 steps&lt;/h2>
&lt;ol>
&lt;li>Choose an &lt;strong>SLI specification&lt;/strong> from the SLI menu
&lt;ul>
&lt;li>确定 SLI 的大方向&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Refine the specification into a detailed &lt;strong>SLI implementation&lt;/strong>
&lt;ul>
&lt;li>确定 SLI 的实现细节&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Walk through the user journey and look for &lt;strong>coverage gaps&lt;/strong>
&lt;ul>
&lt;li>寻找 SLI 没有覆盖到的部分&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Set aspirational &lt;strong>SLO targets&lt;/strong> based on business needs
&lt;ul>
&lt;li>设置理想的 SLO 目标&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="分析系统中的风险">分析系统中的风险&lt;/h2>
&lt;p>围绕着一个 template excel 表格，来做各种分析。&lt;/p>
&lt;p>&lt;a href="https://goo.gl/bnsPj7">https://goo.gl/bnsPj7&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.coursera.org/learn/site-reliability-engineering-slos/lecture/V8Edf/analyzing-risk">https://www.coursera.org/learn/site-reliability-engineering-slos/lecture/V8Edf/analyzing-risk&lt;/a> 这里有使用方式。还没看得太透彻，之后如果有实战机会再补心得。&lt;/p>
&lt;p>大致意思就是说，先列出系统中可能出问题的风险点，评估各种指标，并通过 SLO 来确定哪些风险是我们应该重点关注的。&lt;/p>
&lt;h2 id="为-slo-写文档">为 SLO 写文档&lt;/h2>
&lt;p>理由是您提供的服务无论用户还是开发者，以及上司，都需要知道服务的 SLO 是如何定义的，且如果 break 了，后果是什么。&lt;/p>
&lt;p>建议包括以下三点：&lt;/p>
&lt;ol>
&lt;li>SLO 阈值如何设定？&lt;/li>
&lt;li>为什么该 SLI 是可以合理度量 SLO 的？&lt;/li>
&lt;li>指出哪些数据是不会被 SLI 统计的（非法请求）&lt;/li>
&lt;/ol>
&lt;p>SLO dashboard 例子:&lt;/p>
&lt;p>&lt;img src="https://s3.bmp.ovh/imgs/2022/09/05/436c08bb2d661aa6.jpg" alt="">&lt;/p></description></item><item><title>Blog: Site Reliability Engineering - Week 2</title><link>/blog/sre_week2/</link><pubDate>Tue, 30 Aug 2022 00:01:00 +0800</pubDate><guid>/blog/sre_week2/</guid><description>
&lt;h2 id="course-link">Course Link&lt;/h2>
&lt;p>&lt;a href="https://www.coursera.org/learn/site-reliability-engineering-slos">https://www.coursera.org/learn/site-reliability-engineering-slos&lt;/a>&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a href="https://sre.google/">https://sre.google/&lt;/a>&lt;/p>
&lt;h2 id="sli-指标设计">SLI 指标设计&lt;/h2>
&lt;p>不好的设计：直接使用系统监视图表（比如 CPU 使用率、内存使用率等），或者使用内部状态监视图表等。&lt;/p>
&lt;p>理由是数据噪声大，而且通常和用户体验不呈直接影响的关系。&lt;/p>
&lt;p>好的 SLI 指标应具有以下几个特点：&lt;/p>
&lt;ol>
&lt;li>Has predictable relationship with user happiness
&lt;ul>
&lt;li>与用户幸福感具有可预测的关系&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Shows service is working as users expect it to
&lt;ul>
&lt;li>能展现服务是按照用户期望的方式在运行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Express as: good events / valid events
&lt;ul>
&lt;li>可以表达为 良好请求 除以 合法请求&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Aggregated over a long time horizon
&lt;ul>
&lt;li>在较长的时间窗口内聚合 SLI，以消除数据中的噪声&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="常用的-sli">常用的 SLI&lt;/h2>
&lt;p>两个常见场景如下：&lt;/p>
&lt;h3 id="request--response">Request / Response&lt;/h3>
&lt;p>请求 &amp;amp; 反馈场景。比如 HTTP, RPC 等。&lt;/p>
&lt;p>&lt;strong>Availability&lt;/strong>&lt;/p>
&lt;p>可用性。该 SLI 应设计为所有合法请求中&lt;strong>成功&lt;/strong>的比例。&lt;/p>
&lt;p>&lt;strong>Latency&lt;/strong>&lt;/p>
&lt;p>延迟。该 SLI 应设计为合法请求中&lt;strong>响应速度快于阈值&lt;/strong>的比例。&lt;/p>
&lt;p>&lt;strong>Quality&lt;/strong>&lt;/p>
&lt;p>服务质量。该 SLI 应设计为所有合法请求中&lt;strong>保持服务质量&lt;/strong>的比例。&lt;/p>
&lt;h3 id="data-processing">Data Processing&lt;/h3>
&lt;p>数据批量处理场景。&lt;/p>
&lt;p>&lt;strong>Freshness&lt;/strong>&lt;/p>
&lt;p>新鲜度。该 SLI 应设计为所有合法数据中&lt;strong>生成时间快于阈值&lt;/strong>的比例。&lt;/p>
&lt;p>通常需要时间戳来进行 SLI 指标计算。&lt;/p>
&lt;p>&lt;strong>Correctness&lt;/strong>&lt;/p>
&lt;p>正确度。该 SLI 应设计为所有合法数据中&lt;strong>正确&lt;/strong>的比例。&lt;/p>
&lt;p>需要注意，不能用处理数据的逻辑来判断数据是否正确。&lt;/p>
&lt;p>一种方法是可以使用 golden 输入输出对来对整体数据的正确程度进行估计。&lt;/p>
&lt;p>&lt;strong>Coverage&lt;/strong>&lt;/p>
&lt;p>覆盖程度。该 SLI 应设计为所有合法数据中&lt;strong>成功被处理&lt;/strong>的比例。&lt;/p>
&lt;p>类似于上一节中的可用性 SLI。&lt;/p>
&lt;p>&lt;strong>Throughput&lt;/strong>&lt;/p>
&lt;p>吞吐量。该 SLI 应设计为一段时间内&lt;strong>处理速度快于阈值的时间&lt;/strong>占比。&lt;/p>
&lt;h3 id="复杂场景下的建议">复杂场景下的建议&lt;/h3>
&lt;p>尽量减少 SLI 指标数，推荐 1~3 个。&lt;/p>
&lt;p>太多 SLI 并不能使得每个指标都那么直观地表现系统的可靠程度。并且大量 SLI 会增加它们之间发生冲突的可能。&lt;/p>
&lt;p>这并不意味着其他非 SLI 指标的监控图表也要同样被精简，它们可以帮助你来分析 SLI 低的原因。&lt;/p>
&lt;h3 id="同一种-sli-在多种场景下的聚合">同一种 SLI 在多种场景下的聚合&lt;/h3>
&lt;p>直接将分子之和除以分母之和可能在大部分情况下适用，但也存在一些问题，比如当某一种场景流量较小时，该场景的 SLI 可能会被平滑掉。&lt;/p>
&lt;p>可以使用更复杂一些的聚合策略，比如考虑流量相关的加权。&lt;/p>
&lt;h3 id="sli-在多种场景下的阈值定义">SLI 在多种场景下的阈值定义&lt;/h3>
&lt;p>以请求的 latency 举例，典型的场景划分可以是：&lt;/p>
&lt;ul>
&lt;li>被第三方依赖的请求：因为不知道第三方的调用方式，所以我们不一定要为他们负责，所以只要确保能用即可，比如 10s&lt;/li>
&lt;li>后台请求：较松的时间阈值，比如 5s
&lt;ul>
&lt;li>比如非人类用户（bot）等发出的请求&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>写请求：较紧的时间阈值，比如 1.5s
&lt;ul>
&lt;li>用户点提交按钮对反馈时间是比较宽容的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>交互请求：最紧，比如 400ms&lt;/li>
&lt;/ul>
&lt;h2 id="设置合理的-slo">设置合理的 SLO&lt;/h2>
&lt;h3 id="achieveable-slos">Achieveable SLOs&lt;/h3>
&lt;p>用户期望与过去的表现密切相关。&lt;/p>
&lt;p>如果你已有许多历史数据，则可以通过挖掘历史数据来设置 SLO。这种 SLO 被称之为可达到的 SLO。这种设置方式需要有一个假设，即假设用户对当前和过去的表现感到满意。&lt;/p>
&lt;h3 id="aspirational-slos">Aspirational SLOs&lt;/h3>
&lt;p>没有历史数据怎么办？如果当前服务的表现并不好或者非常好，怎么设置 SLO？&lt;/p>
&lt;p>根据业务需求指定的 SLO 被称之为理想 SLO。可以在服务上限之初，由产品团队来指定，之后可以动态调整。&lt;/p>
&lt;h3 id="持续优化">持续优化&lt;/h3>
&lt;p>首次设定 SLO 时，您需要观察、搜罗用户感受，并与您制定的 SLO 指标对比。&lt;/p>
&lt;p>记得要定时查看 SLO 是否还合适，建议每年查看一次。&lt;/p></description></item><item><title>Blog: Site Reliability Engineering - Week 1</title><link>/blog/sre_week1/</link><pubDate>Sat, 27 Aug 2022 16:36:00 +0800</pubDate><guid>/blog/sre_week1/</guid><description>
&lt;h2 id="course-link">Course Link&lt;/h2>
&lt;p>&lt;a href="https://www.coursera.org/learn/site-reliability-engineering-slos">https://www.coursera.org/learn/site-reliability-engineering-slos&lt;/a>&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a href="https://sre.google/">https://sre.google/&lt;/a>&lt;/p>
&lt;h2 id="slo-service-level-objective">SLO: Service Level Objective&lt;/h2>
&lt;p>服务水平目标。&lt;/p>
&lt;p>虽然系统的可靠性非常重要，但也不能因为保证系统可靠而不开发新 feature。&lt;/p>
&lt;p>所以需要平衡需求开发和保持系统可靠性是重要且具有挑战性的。&lt;/p>
&lt;p>SLO 可以用来判定可靠性和其他新 feature 的优先级。&lt;/p>
&lt;p>对于保持系统可靠运行的人来说，如果经常陷入&lt;strong>救火-&amp;gt;事件调查-&amp;gt;重复性维护&lt;/strong>循环，就会被拖住。&lt;/p>
&lt;p>此时，如果我们可以明确知道&lt;strong>可靠性目标&lt;/strong>是什么，就不必陷入这种被动响应的循环。&lt;/p>
&lt;p>这一点就需要 SLO 来介入，它可以回答&lt;strong>系统的可靠性水平是多少&lt;/strong>这个问题。从而给决策人员通过数据来判定此时此刻是应该开发新 feature 或者提高系统可靠性。&lt;/p>
&lt;h3 id="slo-三原则">SLO 三原则&lt;/h3>
&lt;ol>
&lt;li>Figuring out what you want to promise and to whom
&lt;ul>
&lt;li>搞明白要承诺什么，向谁承诺&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Figuring out the metrics you care about that make your service for reliability good
&lt;ul>
&lt;li>找出需要关心的指标，使得服务具有良好的可靠性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Deciding how much reliability is good enough
&lt;ul>
&lt;li>搞清楚上述指标达到多少就足够好了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="sla-service-level-agreements">SLA: Service Level Agreements&lt;/h2>
&lt;p>服务水平协议，是提供服务者与用户之间达成的可靠性协议。如果违反了 SLA，则提供服务者应当承担后果。&lt;/p>
&lt;p>一般来说，当提供服务者已经发现 SLA 被 break 时才收到警报，那么修复善后过程则非常贵。&lt;/p>
&lt;p>所以需要将 SLO 作为阈值，来提前预警 SLA 被 break 的风险。&lt;/p>
&lt;h3 id="sla-vs-slo">SLA vs SLO&lt;/h3>
&lt;p>SLA 是存在后果的对外承诺；SLO 则是为了满足客户期望的内部承诺。&lt;/p>
&lt;p>当系统的 SLO 被 break 时，就需要特别开始关注系统的可靠性与运行风险了。&lt;/p>
&lt;h2 id="happiness-test-幸福测试">Happiness Test: 幸福测试&lt;/h2>
&lt;p>用来帮助设定 SLO 的值。当勉强满足 SLO 时，客户是开心的；反之，客户则是不满的。&lt;/p>
&lt;p>挑战在于如何量化指标，如何衡量客户的幸福感。&lt;/p>
&lt;p>比如客户可能由很多群体组成，每个群体的关注点不同。&lt;/p>
&lt;h2 id="sli-service-level-indicators">SLI: Service Level Indicators&lt;/h2>
&lt;p>服务水平指标，是对用户体验的测量指标。最好是表达所有有效时间中良好的比例，比如过去一段时间内成功请求所占所有合法请求的比例。&lt;/p>
&lt;pre tabindex="0">&lt;code>SLI = good events / valid events
&lt;/code>&lt;/pre>&lt;h2 id="error-budgets-错误预算">Error Budgets: 错误预算&lt;/h2>
&lt;p>用于平滑地表示 break SLO 的程度。当 error budget 达到 100% 时，意味着 SLO 已经被 break 了，需要把可靠性放在第一优先级来看。&lt;/p>
&lt;p>当 error budget 还低时，就可以让新 feature 开发放在高优先的位置（可以采取更激进的发布），error budget 逐渐升高但还没超过 100% 时，就需要更保守的发布策略。&lt;/p>
&lt;p>对于某种特定类型的故障来说，可以定义如下指标：&lt;/p>
&lt;ul>
&lt;li>TTD: Time to detect
&lt;ul>
&lt;li>从用户受到影响到 SRE on-call 来解决问题的时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>TTR: Time to repair &amp;amp; Time to resolution
&lt;ul>
&lt;li>从发现问题到解决问题的时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>TTF: Time to failure
&lt;ul>
&lt;li>故障发生的频率&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>该故障对错误预算的预期影响 epsilon&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>epsilon = TTD * TTR * 故障影响因子% / TTF
&lt;/code>&lt;/pre>&lt;p>减少故障对错误预算的影响，可以从以下几点出发：&lt;/p>
&lt;ul>
&lt;li>降低 TTD
&lt;ul>
&lt;li>添加自动机制来捕获异常，比如自动警报、监视等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>降低 TTR
&lt;ul>
&lt;li>通过写文档，打 log 来让错误更容易被定位与解决&lt;/li>
&lt;li>做一些简便的工具用来排查问题&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>降低故障影响因子
&lt;ul>
&lt;li>限制特定更改在一段时间内可能影响的用户数量
&lt;ul>
&lt;li>基于百分比的更新，比如新功能仅推送给 0.1% 的用户，再一点点增加&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>服务在故障期间以降级模式运行，比如只允许读但不允许写&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>提高 TTF
&lt;ul>
&lt;li>自动将流量引导至远离发生故障的区域&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>做好问题定义：SLOs &amp;amp; SLIs&lt;/li>
&lt;li>让系统恰好达到它应有的稳定程度，但不必做到 100% 的极致&lt;/li>
&lt;li>错误预算是沟通的基础&lt;/li>
&lt;li>SLOs 不是永远不变的&lt;/li>
&lt;li>组织间需要较强的合作&lt;/li>
&lt;/ul></description></item><item><title>Blog: pyenv instruction</title><link>/blog/pyenv/</link><pubDate>Fri, 20 May 2022 22:51:32 +0800</pubDate><guid>/blog/pyenv/</guid><description>
&lt;h2 id="what-is-pyenv">What is pyenv?&lt;/h2>
&lt;p>&lt;a href="https://github.com/pyenv/pyenv">pyenv&lt;/a> is a Python version manager which is a tool to manage multiple Python versions.&lt;/p>
&lt;p>&lt;a href="https://github.com/pyenv/pyenv-virtualenv">pyenv-virtualenv&lt;/a> is a tool to create isolated Python environments. It allows &lt;code>pyenv&lt;/code> and &lt;code>virtualenv&lt;/code> to work together.(&lt;code>pyenv-virtualenv&lt;/code> 是一个可以将 &lt;code>pyenv&lt;/code> 和 &lt;code>virtualenv&lt;/code> 无缝连接起来的插件)[1]&lt;/p>
&lt;h2 id="why-use-pyenv">Why use pyenv?&lt;/h2>
&lt;p>When you develop multiple python projects, and these projects depends on different versions of Python or different Python libraries, you need this &lt;code>pyenv&lt;/code> tool to manage Python versions or &lt;code>pyenv-virtualenv&lt;/code> to manage different isolated environments with &lt;code>pyenv&lt;/code>.(当你在开发多个 Python 项目，且这些项目依赖了不同版本的 Python 或者不同库时，就会需要 &lt;code>pyenv&lt;/code> 来管理 Python 版本或者使用 &lt;code>pyenv-virtualenv&lt;/code> 来管理不同独立的 Python 环境)&lt;/p>
&lt;h2 id="how-it-works">How it works?&lt;/h2>
&lt;p>Sample from &lt;a href="https://github.com/pyenv/pyenv#how-it-works">https://github.com/pyenv/pyenv#how-it-works&lt;/a> .&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">graph LR
cmd[Python-related command&amp;lt;br/&amp;gt;Like python, pip, ...] --&amp;gt; Shims
Shims --&amp;gt; pyenv
&lt;/code>&lt;/pre>&lt;p>Simply to say, any Python-related command (like pip, python, pydoc&amp;hellip;) will be executed by &lt;code>~/.pyenv/shims/&amp;lt;command&amp;gt;&lt;/code> first, then a proper Python version will be selected and the command will be executed(简单来说，所有与 Python 相关的指令(比如 pip, python, pydoc&amp;hellip;)都会被 &lt;code>~/.pyenv/shims/&amp;lt;command&amp;gt;&lt;/code> 执行，然后 &lt;code>pyenv&lt;/code> 会选中一个合适的 Python 版本与环境来执行该指令).&lt;/p>
&lt;h3 id="order-of-python-version-selection">Order of Python version selection&lt;/h3>
&lt;ol>
&lt;li>check &lt;code>PYENV_VERSION&lt;/code> environment variable (could be set by &lt;code>pyenv shell&lt;/code>). If it is set, use it. Otherwise, go to step 2.&lt;/li>
&lt;li>check &lt;code>.python-version&lt;/code> file in the current directory (could be set by &lt;code>pyenv local&lt;/code>). If it is set, use it. Otherwise, go to step 3.&lt;/li>
&lt;li>check &lt;code>.python-version&lt;/code> file in all of the parent directories. If it is found, use it. Otherwise, go to step 4(找当前目录的所有父目录，看是否有 &lt;code>.python-version&lt;/code> 文件。如果找到则使用，否则，转进到第 4 步).&lt;/li>
&lt;li>check &lt;code>$(pyenv root)/version&lt;/code> file. If it is set, use it. Otherwise, use the default version defined by system.&lt;/li>
&lt;/ol>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>Sample from &lt;a href="https://github.com/pyenv/pyenv#installation">https://github.com/pyenv/pyenv#installation&lt;/a> and &lt;a href="https://github.com/pyenv/pyenv-virtualenv#installation">https://github.com/pyenv/pyenv-virtualenv#installation&lt;/a> .&lt;/p>
&lt;h3 id="for-linuxmacos">For Linux/macOS&lt;/h3>
&lt;p>End-to-end installation commands at my environments:&lt;/p>
&lt;p>ENV-LAPTOP: Homebrew at macOS with zsh:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install pyenv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;export PYENV_ROOT=&amp;#34;$HOME/.pyenv&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;command -v pyenv &amp;gt;/dev/null || export PATH=&amp;#34;$PYENV_ROOT/bin:$PATH&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;eval &amp;#34;$(pyenv init -)&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc &lt;span style="color:#8f5902;font-style:italic"># install `pyenv` into your shell as a shell function, enable shims and autocompletion&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install pyenv-virtualenv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;eval &amp;#34;$(pyenv virtualenv-init -)&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ENV-WORK: Ubuntu 20.04 with zsh:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/pyenv/pyenv.git ~/.pyenv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;export PYENV_ROOT=&amp;#34;$HOME/.pyenv&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;command -v pyenv &amp;gt;/dev/null || export PATH=&amp;#34;$PYENV_ROOT/bin:$PATH&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;eval &amp;#34;$(pyenv init -)&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc &lt;span style="color:#8f5902;font-style:italic"># install `pyenv` into your shell as a shell function, enable shims and autocompletion&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/pyenv/pyenv-virtualenv.git .pyenv/plugins/pyenv-virtualenv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;eval &amp;#34;$(pyenv virtualenv-init -)&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="for-windows">For Windows&lt;/h3>
&lt;p>&lt;code>pyenv&lt;/code> does not support Windows yet. So I use &lt;a href="https://github.com/pyenv-win/pyenv-win">pyenv-win&lt;/a> instead.&lt;/p>
&lt;p>Because &lt;code>pyenv&lt;/code> is not supported at Windows, then &lt;code>pyenv-virtualenv&lt;/code> is unavailable at Windows too. So I use &lt;code>virtualenv&lt;/code> instead.&lt;/p>
&lt;p>End-to-end installation commands at my environment:&lt;/p>
&lt;p>ENV-PC: Windows 10 with PowerShell 7.2.1[4]:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">git&lt;/span> &lt;span style="color:#000">clone&lt;/span> &lt;span style="color:#000">https&lt;/span>&lt;span style="color:#a40000">:&lt;/span>&lt;span style="color:#000;font-weight:bold">//&lt;/span>&lt;span style="color:#000">github&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#000;font-weight:bold">/&lt;/span>&lt;span style="color:#204a87">pyenv-win&lt;/span>&lt;span style="color:#000;font-weight:bold">/&lt;/span>&lt;span style="color:#204a87">pyenv-win&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">git&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$HOME&lt;/span>&lt;span style="color:#4e9a06">/.pyenv&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">System.Environment&lt;/span>&lt;span style="color:#000;font-weight:bold">]::&lt;/span>&lt;span style="color:#000">SetEnvironmentVariable&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;PYENV&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">$env:USERPROFILE&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;\.pyenv\pyenv-win\&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;User&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">System.Environment&lt;/span>&lt;span style="color:#000;font-weight:bold">]::&lt;/span>&lt;span style="color:#000">SetEnvironmentVariable&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;PYENV_ROOT&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">$env:USERPROFILE&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;\.pyenv\pyenv-win\&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;User&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">System.Environment&lt;/span>&lt;span style="color:#000;font-weight:bold">]::&lt;/span>&lt;span style="color:#000">SetEnvironmentVariable&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;PYENV_HOME&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">$env:USERPROFILE&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;\.pyenv\pyenv-win\&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;User&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">System.Environment&lt;/span>&lt;span style="color:#000;font-weight:bold">]::&lt;/span>&lt;span style="color:#000">SetEnvironmentVariable&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;path&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">$env:USERPROFILE&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;\.pyenv\pyenv-win\bin;&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#000">$env:USERPROFILE&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;\.pyenv\pyenv-win\shims;&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">+&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">System.Environment&lt;/span>&lt;span style="color:#000;font-weight:bold">]::&lt;/span>&lt;span style="color:#000">GetEnvironmentVariable&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;path&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;User&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;User&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">pyenv&lt;/span> &lt;span style="color:#000">install&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">version&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">pyenv&lt;/span> &lt;span style="color:#000">global&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">version&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">python&lt;/span> &lt;span style="color:#000">-m&lt;/span> &lt;span style="color:#000">pip&lt;/span> &lt;span style="color:#000">install&lt;/span> &lt;span style="color:#000;font-weight:bold">-&lt;/span>&lt;span style="color:#000">-user&lt;/span> &lt;span style="color:#000">virtualenv&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="usage">Usage&lt;/h2>
&lt;h3 id="pyenvpyenv-win">pyenv/pyenv-win&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># check all installable Python versions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pyenv install --list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># install a specific Python version&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pyenv install &amp;lt;version&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># use a specific Python version globally&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pyenv global &amp;lt;version&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># use a specific Python version in current directory or in all of its subdirectories&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pyenv &lt;span style="color:#204a87">local&lt;/span> &amp;lt;version&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># use a specific Python version in the current shell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pyenv shell &amp;lt;version&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pyenv-virtualenv">pyenv-virtualenv&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pyenv virtualenv &amp;lt;version&amp;gt; &amp;lt;env_name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pyenv activate &amp;lt;env_name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pyenv deactivate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># delete venv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pyenv virtualenv-delete &amp;lt;env_name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="virtualenv">virtualenv&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python -m venv &amp;lt;env_name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">source&lt;/span> &amp;lt;env_name&amp;gt;/bin/activate &lt;span style="color:#8f5902;font-style:italic"># for unix-like systems&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#4e9a06">\&amp;lt;&lt;/span>env_name&amp;gt;&lt;span style="color:#4e9a06">\S&lt;/span>cripts&lt;span style="color:#4e9a06">\a&lt;/span>ctivate &lt;span style="color:#8f5902;font-style:italic"># for Windows&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>deactivate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># delete venv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf &amp;lt;env_name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="q--a">Q &amp;amp; A&lt;/h2>
&lt;h3 id="q-error-occurred-error-the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib">Q: Error occurred: &lt;code>ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?&lt;/code>&lt;/h3>
&lt;p>Run commands below[2]:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install make build-essential libssl-dev zlib1g-dev &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="q-error-occurred-importerror-libpython38so10-cannot-open-shared-object-file-no-such-file-or-directory">Q: Error occurred: &lt;code>ImportError: libpython3.8.so.1.0: cannot open shared object file: No such file or directory&lt;/code>&lt;/h3>
&lt;p>Run commands below[3]:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>env &lt;span style="color:#000">PYTHON_CONFIGURE_OPTS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;--enable-shared&amp;#34;&lt;/span> pyenv install x.x.x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ls ~/.pyenv/version/x.x.x/lib
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>[1] &lt;a href="https://stackoverflow.com/questions/29950300/what-is-the-relationship-between-virtualenv-and-pyenv">https://stackoverflow.com/questions/29950300/what-is-the-relationship-between-virtualenv-and-pyenv&lt;/a>&lt;/li>
&lt;li>[2] &lt;a href="https://github.com/pyenv/pyenv/wiki#suggested-build-environment">https://github.com/pyenv/pyenv/wiki#suggested-build-environment&lt;/a>&lt;/li>
&lt;li>[3] &lt;a href="https://github.com/pyenv/pyenv/issues/1504#issuecomment-703248521">https://github.com/pyenv/pyenv/issues/1504#issuecomment-703248521&lt;/a>&lt;/li>
&lt;li>[4] &lt;a href="https://rkadezone.wordpress.com/2020/09/14/pyenv-win-virtualenv-windows/">https://rkadezone.wordpress.com/2020/09/14/pyenv-win-virtualenv-windows/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Blog: Hugo with Docsy theme</title><link>/blog/hugo-docsy/</link><pubDate>Thu, 19 May 2022 00:28:16 +0800</pubDate><guid>/blog/hugo-docsy/</guid><description>
&lt;h2 id="install-hugo">Install Hugo&lt;/h2>
&lt;h3 id="macos">macOS&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install hugo &lt;span style="color:#8f5902;font-style:italic"># install hugo-extended&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="windows">Windows&lt;/h3>
&lt;p>Download binary at release page of Hugo: &lt;a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases&lt;/a>&lt;/p>
&lt;h2 id="install-docsy-theme">Install Docsy theme&lt;/h2>
&lt;h3 id="preparation">Preparation&lt;/h3>
&lt;p>Install NodeJS first. Then install packages below:&lt;/p>
&lt;ul>
&lt;li>autoprefixer&lt;/li>
&lt;li>postcss-cli&lt;/li>
&lt;li>postcss&lt;/li>
&lt;/ul>
&lt;p>For convenience, I construct a &lt;code>package.json&lt;/code> at the root dir of my repo:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;devDependencies&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;autoprefixer&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;^10.4.7&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;postcss-cli&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;^9.1.0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;postcss&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;^8.4.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For example, at MacOS:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install node &lt;span style="color:#8f5902;font-style:italic"># install nodejs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install &lt;span style="color:#8f5902;font-style:italic"># install depdendencies&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="clone-docsy-theme">Clone Docsy theme&lt;/h3>
&lt;p>Add &lt;a href="https://github.com/google/docsy">Docsy&lt;/a> as submodule to your repo:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git submodule add https://github.com/google/docsy.git themes/docsy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule update --init --recursive &lt;span style="color:#8f5902;font-style:italic"># init submodules inside Docsy&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploy-using-github-action">Deploy using Github Action&lt;/h2>
&lt;p>New a yaml file at &lt;code>.github/workflows/gh-pages.yml&lt;/code>, contents as below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GitHub Pages&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">on&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">push&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">branches&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">jobs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">deploy&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">runs-on&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">ubuntu-latest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">concurrency&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">group&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">${{ github.workflow }}-${{ github.ref }}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># cancel same job if a newer commit&amp;#39;s job is running&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">steps&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">uses&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">actions/checkout@v3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">with&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">submodules&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">recursive&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># recursively checkout submodules&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fetch-depth&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Setup Node &lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">uses&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">actions/setup-node@v2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">with&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">node-version&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">14.&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Prepare for Docsy&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">run&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">npm install&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Setup Hugo&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">uses&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">peaceiris/actions-hugo@v2&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">with&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">hugo-version&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;latest&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">extended&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># use hugo-extended&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Build&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">run&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">hugo --minify&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Deploy&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">uses&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">peaceiris/actions-gh-pages@v3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">${{ github.ref == &amp;#39;refs/heads/main&amp;#39; }} &lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># triggered only at main branch&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">with&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">github_token&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">${{ secrets.GH_TOKEN }}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># needs to set actions secret variable first, https://docs.github.com/cn/actions/security-guides/automatic-token-authentication&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">publish_dir&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">./public&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you need to change your source branch to &lt;code>gh-pages&lt;/code> at &lt;code>Settings &amp;gt; Code and automation &amp;gt; Pages &amp;gt; Source&lt;/code>.&lt;/p>
&lt;h2 id="example-repo">Example repo&lt;/h2>
&lt;p>&lt;a href="https://github.com/nero19960329/nero19960329.github.io">https://github.com/nero19960329/nero19960329.github.io&lt;/a>&lt;/p></description></item><item><title>Blog: Convex Hull - Part 3</title><link>/blog/convex-hull-3/</link><pubDate>Tue, 13 Mar 2018 18:45:03 +0800</pubDate><guid>/blog/convex-hull-3/</guid><description>
&lt;p>这次继续介绍几个凸包算法，包括 Graham scan 和快速凸包算法。&lt;/p>
&lt;h2 id="graham-scan">Graham scan&lt;/h2>
&lt;hr>
&lt;p>Graham scan 是一个表达起来很简洁的算法，而且也没有涉及到复杂的数据结构，它仅仅需要两个栈 $$S$$ 和 $$T$$。&lt;/p>
&lt;p>首先遍历所有点，选出 lowest-then-leftmost 的点 $$p_{1}$$，并以该点为参照，将所有其余点按照极角排序，分别为 $$p_{2},p_{3},\cdots ,p_{n}$$。&lt;/p>
&lt;p>两个栈初始化为（方括号代表栈底）：
$$S=[\ p_{1},p_{2}&amp;gt;$$
$$T=&amp;lt; p_{3},p_{4},\cdots ,p_{n}\ ]$$&lt;/p>
&lt;p>扫描算法流程：当栈 $$T$$ 非空时，如果栈 $$T$$ 的栈顶在栈 $$S$$ 的栈顶与次栈顶组成的有向边的左侧，则将栈 $$T$$ 的栈顶压入栈 $$S$$；否则弹出栈 $$S$$ 的栈顶元素。伪代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">while&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">empty&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">toLeft&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">S&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">S&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span> &lt;span style="color:#000">S&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">push&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pop&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">S&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pop&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有兴趣的读者可以在下图所示的点集上运行一遍算法流程，我就不赘述了。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/13/9hMEoF.jpg" alt="graham-scan-1">&lt;/p>
&lt;h3 id="扫描效率">扫描效率&lt;/h3>
&lt;p>这一节讨论扫描一步的效率。粗浅来看，点集中除了参照点的每个点都可能被做 $$\Omega(n)$$ toLeft 比较，那么扫描效率就是 $$O(n)\times O(n)=O(n^{2})$$。但这种估计方法明显太松了，接下来用两种方法求更紧的上界。&lt;/p>
&lt;h4 id="平面图">平面图&lt;/h4>
&lt;p>先来复习一下图论中平面图的概念：&lt;/p>
&lt;blockquote>
&lt;p>在图论中，平面图是可以画在平面上并且使得不同的边可以互不交叠的图。而如果一个图无论怎样都无法画在平面上，并使得不同的边互不交叠，那么这样的图不是平面图，或者称为非平面图。&lt;/p>
&lt;/blockquote>
&lt;p>而在扫描一步中，遍历的所有边都不会相交（如下图）。也就是说，这一步的搜索空间构成了一个平面图。根据欧拉定理，得知平面图中边数 $$E=O(3n)$$，从而说明了扫描效率为 $$O(n)$$。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/13/9hM5wT.jpg" alt="graham-scan-2">&lt;/p>
&lt;h4 id="均摊分析">均摊分析&lt;/h4>
&lt;p>我们从另一方面看待这个问题，考虑变量 $$A=|S|+2|T|$$。显而易见地，每次循环中 $$A$$ 都会减少 $$1$$。扫描开始时，$$A=2n-2$$；扫描结束时，$$A\ge 3$$。则循环执行了 $$O(2n-5)=O(n)$$ 次，也即扫描效率为 $$O(n)$$。&lt;/p>
&lt;h3 id="简化">简化&lt;/h3>
&lt;p>仔细想想，算法中的排序一步是不需要 toLeft 作为比较器的。&lt;/p>
&lt;p>假如在点集中增加一个点作为参考点，并把它无限拉低，直到 $$(0,-\infty)$$，则点集中其余点与参考点连成的线就是竖直的，也就是说，我们只需要对其余点的横轴坐标排序即可。&lt;/p>
&lt;p>但由于引入了一个新的点，所以也会导致求得的凸包与原点集凸包不符。幸运的是，如果我们将新凸包中与参考点有关的两条边删掉，就可以得到原凸包的上半部分，称之为上半凸包（upper hull）。&lt;/p>
&lt;p>同理，可以在点集中增加参考点 $$(0,+\infty)$$，就可以求出下半凸包（lower hull）。将两者合并，就得到了原凸包。&lt;/p>
&lt;h2 id="极点个数期望">极点个数期望&lt;/h2>
&lt;hr>
&lt;p>令 $$P$$ 是平面上的点集，假设点的个数是 $$n$$，这一节将讨论 $$CH(P)$$（P的凸包）上点个数的量级。&lt;/p>
&lt;p>值得注意的是，不同的采样方式会得出不同的结果。考虑在单位正方形内均匀且独立地采样（单位正方形与任意长方形是相同的，因为两者可以通过仿射变换至彼此）。&lt;/p>
&lt;p>取凸包的最上/下/左/右四个点，可以将凸包分成四个部分，不失一般性，我们只考虑凸包的右上角 $$CH_{UR}(P)$$，如下图。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/13/9hlHMR.jpg" alt="expection-complexity-1">&lt;/p>
&lt;p>在右上角区域，可以定义「极大点」：&lt;/p>
&lt;blockquote>
&lt;p>以点 $$P$$ 为原点建立坐标系，如果第一象限没有点集中的其余点，则称点 $$P$$ 为极大点。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/13/9h1eJg.jpg" alt="expection-complexity-2">&lt;/p>
&lt;p>称极大点集为 $$MAX(P)$$，则 $$|CH_{UR}(P)|\le |MAX(P)|$$，接下来考虑 $$|MAX(P)|$$ 的期望。&lt;/p>
&lt;p>从右到左，将点集中的点称之为 $${p_{1},p_{2},\cdots ,p_{n}}$$。对于点 $$p_{k}$$ 来讲，它是极大点当且仅当它是 $${p_{1},
p_{2}\cdots ,p_{k}}$$ 中最高的。由于点是在单位正方形内均匀独立采样得到的，则 $$p_{k}$$ 是极大点的概率为 $$\frac{1}{k}$$。故&lt;/p>
&lt;p>$$E[|MAX(P)|]=\sum_{i=1}^{n} \frac{1}{n}=O(\log(n))$$&lt;/p>
&lt;p>经过上述推导，得知当在单位正方形内均匀独立采样时，凸包上点个数的期望为 $$O(\log(n))$$。&lt;/p>
&lt;p>除了在单位正方形内采样以外，在其他几何形状内采样则会得到不同的结果：&lt;/p>
&lt;ul>
&lt;li>单位圆 —— $$O(n^{\frac{1}{3}})$$；&lt;/li>
&lt;li>三角形 —— $$O(\log(n))$$；&lt;/li>
&lt;li>凸 $$k$$ 多边形 —— $$O(k\log(n))$$。&lt;/li>
&lt;/ul>
&lt;h2 id="快速凸包quickhull">快速凸包（Quickhull）&lt;/h2>
&lt;hr>
&lt;p>首先找出点集中 leftmost-then-lowest 的点 $$s$$，以及 rightmost-then-highest 的点 $$t$$。则求解凸包就可以分为求解上半凸包和下半凸包，如下图。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/13/9hGKQH.jpg" alt="quickhull-1">&lt;/p>
&lt;p>由于求解上下半凸包是对称的，所以只讨论上半凸包的求解过程。&lt;/p>
&lt;p>与快速排序类似，在每次求解凸包时，都将当前点集分为三部分：&lt;/p>
&lt;ul>
&lt;li>$$P_{0}$$ 区域是需要被剪掉的部分，这其中的点之后无需考虑；&lt;/li>
&lt;li>$$P_{1},P_{2}$$ 区域为左、右子区域，原凸包可以由这两个子区域的凸包组合而成。&lt;/li>
&lt;/ul>
&lt;p>具体来说，取距离线段 $$st$$ 最远的点 $$r$$ 作为哨兵。那么 $$\triangle srt$$ 包围的区域则为 $$P_{0}$$，$$sr$$ 左侧的区域是 $$P_{1}$$，$$rt$$ 右侧的区域是 $$P_{2}$$，如下图。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/13/9hGL1e.jpg" alt="quickhull-2">&lt;/p>
&lt;p>当然快速凸包算法的最差情况也是 $$O(n^{2})$$ 的，考虑这种情况：在单位圆的直径上取两个点，随后在圆心角为 $$\frac{90^{\circ}}{2^{k}},k=0,1,2,\cdots$$ 的位置加入点，如下图。那么每次选择哨兵时都会造成左右极不均匀，从而导致最坏情况。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/13/9h33jA.jpg" alt="quickhull-3">&lt;/p></description></item><item><title>Blog: Convex Hull - Part 2</title><link>/blog/convex-hull-2/</link><pubDate>Tue, 06 Mar 2018 18:07:42 +0800</pubDate><guid>/blog/convex-hull-2/</guid><description>
&lt;p>先来说两个简单的计算几何小问题：&lt;/p>
&lt;blockquote>
&lt;p>给定两个二维线段，判定它们是否相交？&lt;/p>
&lt;/blockquote>
&lt;p>当然最笨的办法就是求出两个线段方程，判断解是否满足要求。但这会引入除法操作，这不是我们希望的结果。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/06/9gQJxK.gif" alt="line-line">&lt;/p>
&lt;p>如上图，考虑 $$P_{3}, P_{4}$$ 是否在线段 $$a$$ 的异侧（toLeft 返回值不同则表示在异侧）。当然只做这一次异侧判断是不行的，对称地考虑 $$P_{1}, P_{2}$$ 是否在线段 $$b$$ 的异侧。如果两次异侧判断都成功，则说明两个线段相交。这种方法只需要进行 $$4$$ 次 toLeft 判断，提高了效率。&lt;/p>
&lt;blockquote>
&lt;p>用极点法求出若干极点后，如何将其排成环？&lt;/p>
&lt;/blockquote>
&lt;p>假设 leftmost-then-lowest 的极点为 $$P_0$$，定义 $$P_{1} &amp;lt; P_{2} \Leftrightarrow toLeft(P_{0}P_{1}, P_{2})==false$$。按照上述定义的偏序关系就可以对所有极点排序，排序后从小到大即可。&lt;/p>
&lt;p>从上面两道小题能够看出 toLeft 判定的重要性，这个判定函数将会贯穿计算几何的学习历程。&lt;/p>
&lt;h2 id="极边法extreme-edges">极边法（Extreme Edges）&lt;/h2>
&lt;hr>
&lt;p>从极点法我们可以自然而然地想到，如果遍历点集中所有可能成为凸包边界（极边）的线段，也能达到求解凸包的目的。事实上，我们也只需要对点集中每两个点相连的线段判断其余点是否都处于它的一侧即可。&lt;/p>
&lt;p>所以极边法的时间复杂度相对极点法要低一些，遍历所有线段（$$C_{n}^{2}=O(n^2)$$）$$\times$$ $$O(n)$$ 个 toLeft 判断 $$=O(n^3)$$ 的复杂度，虽然好一些但还不够。&lt;/p>
&lt;h2 id="增量法incremental-construction">增量法（Incremental Construction）&lt;/h2>
&lt;hr>
&lt;p>顾名思义，增量法的主要思路就是遍历点集中的所有点，每次都更新当前已遍历点集的凸包，最后得到对于所有点的凸包。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/06/9gJsRs.png" alt="incremental-construction-1">&lt;/p>
&lt;p>如上图，在添加新点时会发生三种情况：&lt;/p>
&lt;ul>
&lt;li>该点作为新凸包上的点，且不影响原凸包上的点；&lt;/li>
&lt;li>该点在目前凸多边形的内部；&lt;/li>
&lt;li>该点作为新凸包上的点，并删除一些原凸包上的点。&lt;/li>
&lt;/ul>
&lt;p>那么怎么判断新加入的点属于上面哪种情况呢？我们一点一点看，先来判断新点是否属于原凸包内，也即判断点是否属于凸多边形的内部。&lt;/p>
&lt;p>&lt;strong>线性解法&lt;/strong> —— 逆时针遍历凸多边形的所有边，执行 toLeft 判定。优势是可以应用于链表等动态内存结构，劣势是慢；&lt;/p>
&lt;p>&lt;strong>二分查找&lt;/strong> —— 二分地判定点是否属于两条射线张成的区域之内，如下图。优势是快，劣势是只能应用于数组等静态内存结构。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/06/9g8W60.png" alt="point-in-convex-polygon">&lt;/p>
&lt;p>在增量法中，由于我们需要保证能够在常数时间内删除点，所以需要采用链表等结构，那么还是需要使用线性解法。&lt;/p>
&lt;p>那么怎么应对刚刚说的第三种情况呢？我们将原凸包分成四部分：&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/06/9gJdZ8.png" alt="incremental-construction-2">&lt;/p>
&lt;ul>
&lt;li>上、下切点（$$t,s$$）；&lt;/li>
&lt;li>$$ts$$ 段，需要被删除的部分；&lt;/li>
&lt;li>$$st$$ 段，需要保留的部分。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/06/9gJIJJ.png" alt="incremental-construction-3">&lt;/p>
&lt;p>那么怎么判断点属于哪种类别呢？如上图，&lt;/p>
&lt;ul>
&lt;li>若 $$v$$ 的两个邻域点都分布在 $$xv$$ 的左侧，则 $$v$$ 是下切点；&lt;/li>
&lt;li>若 $$v$$ 的两个邻域点都分布在 $$xv$$ 的右侧，则 $$v$$ 是上切点；&lt;/li>
&lt;li>若 $$v$$ 的两个邻域点（逆时针上、逆时针下）分布在 $$xv$$ 的左右侧，则 $$v$$ 属于 $$ts$$ 段；&lt;/li>
&lt;li>若 $$v$$ 的两个邻域点（逆时针上、逆时针下）分布在 $$xv$$ 的右左侧，则 $$v$$ 属于 $$st$$ 段；&lt;/li>
&lt;/ul>
&lt;p>幸运的是，可以用类似的方法判断点是否在凸多边形内，也即判断其余点是否都属于 $$st$$ 段。&lt;/p>
&lt;h2 id="jarvis-march">Jarvis March&lt;/h2>
&lt;hr>
&lt;p>该算法的大致思想是逐条选出极边并加入到凸包中，如下图。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/07/9gymfx.png" alt="jarvis-march-1">&lt;/p>
&lt;p>如下图，在算法运行中，怎样选取下个点，使得它与当前点 $$k$$ 组成的边是下一条极边（$$ks$$）呢？&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/07/9gya1f.png" alt="jarvis-march-2">&lt;/p>
&lt;p>对于极点 $$k$$，只要找到点 $$s$$ ，使得 $$ks$$ 的右侧没有任何其他点。与本文一开始提出的第二个小问题类似，以 toLeft 测试为比较函数，找出其余点中最大的那个即可。&lt;/p>
&lt;p>不失一般性，第一个极点 $$o$$ 可以按照 lowest-than-leftmost 的规则选取。&lt;/p>
&lt;h2 id="凸包算法的下界">凸包算法的下界&lt;/h2>
&lt;hr>
&lt;p>使用归约法（reduction）说明。关于归约法，维基百科有如下说明：&lt;/p>
&lt;blockquote>
&lt;p>以直觉观之，如果存在能有效解决问题 B 的算法，也可以作为解决问题 A 的子程序，则将问题 A 称为“可归约”到问题 B，因此求解 A 并不会比求解 B 更困难。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/07/9g6QCq.png" alt="lower-bound-1">&lt;/p>
&lt;p>上图表示了一个线性归约，如果对于问题 A 的&lt;strong>任意&lt;/strong>输入都可以在线性时间内转换为&lt;strong>某个&lt;/strong> B 的输入，且对于问题 B 的输出都可以在线性时间内转换为 A 的输出，那么称问题 A 可以线性归约至问题 B。且问题 A 的下界也是问题 B 的下界。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/03/07/9g6xzV.png" alt="lower-bound-2">&lt;/p>
&lt;p>考虑基于比较的排序问题，对于一维上的所有输入，可以在线性时间内投影到抛物线 $$y=x^2$$ 上。而投影过后的点集的凸包投影回一维上就是排序后的结果。则基于比较的排序问题可以线性归约为二维凸包问题，那么二维凸包问题的下界就是 $$O(n\log(n))$$。&lt;/p>
&lt;p>下次将介绍几个 $$O(n\log(n))$$ 的凸包算法。&lt;/p></description></item><item><title>Blog: Convex Hull - Part 1</title><link>/blog/convex-hull-1/</link><pubDate>Tue, 27 Feb 2018 16:40:37 +0800</pubDate><guid>/blog/convex-hull-1/</guid><description>
&lt;p>这学期有幸选到了贵系邓俊辉老师的《计算几何》，这学期会随着课程进度更新一些笔记。&lt;/p>
&lt;h2 id="凸包">凸包&lt;/h2>
&lt;p>用邓老师的话来说，所谓凸包就是&lt;/p>
&lt;blockquote>
&lt;p>把点集看作钉在桌子上的若干钉子，这时撑开一个橡皮筋，让它能够囊括所有钉子，松手后橡皮筋围成的多边形就是该点集的凸包&lt;/p>
&lt;/blockquote>
&lt;p>当然这只是一个凸包在二维上的解释，但通俗易懂，如下图。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/02/27/9BGTJK.gif" alt="convex_hull_1">&lt;/p>
&lt;p>那么给定一个点集 $$P$$，如何计算出其凸包 $$CH(P)$$ 呢？接下来将介绍第一个计算凸包的算法 —— 极点法。&lt;/p>
&lt;h2 id="极点法extreme-points">极点法（Extreme Points）&lt;/h2>
&lt;h3 id="极点">极点&lt;/h3>
&lt;p>如下图，对于点集中的某个点，若存在一条经过该点的直线，使得点集中的其余点均处于该直线的一侧，则称该点为极点（Extreme Point）。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/02/27/9BJ9W8.png" alt="convex-hull-extreme-points">&lt;/p>
&lt;p>但根据上述定义很难实现凸包的构建算法，因为对于每个点都要遍历经过它的所有直线，而这些直线是无限的。&lt;/p>
&lt;p>对于非极点来说，它必然会被点集中某三个点组成的三角形完全包围（不包括边界），而极点不满足该性质，如下图。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/02/27/9BJwlD.png" alt="convex-hull-extreme-points-2">&lt;/p>
&lt;p>**所以就可以遍历点集中的所有三角形，将其覆盖的所有点设置为非极点。通过排除所有的非极点就可以得到点集中的所有极点。**该算法的时间复杂度是 $$O(C_{n}^{3}\cdot n)=O(n^4)$$ 的。&lt;/p>
&lt;p>那么如何判断点是否在三角形内呢？当然，可以使用射线法或累计角度法判定，但未免有些「杀鸡用牛刀」的意味。考虑边按逆时针排列的三角形，对于这三条有向边，若某点处于它们的左侧（toLeft 判断），则该点被该三角形覆盖，如下图。&lt;/p>
&lt;p>&lt;img src="https://s1.ax1x.com/2018/02/27/9BJ06e.png" alt="convex-hull-in-triangle">&lt;/p>
&lt;p>通过计算有向面积（$$\times 2$$）的符号能够判定某点是否在有向边的左侧：
$$
2S=\begin{array}{|ccc|}
p.x &amp;amp; p.y &amp;amp; 1 \
q.x &amp;amp; q.y &amp;amp; 1 \
s.x &amp;amp; s.y &amp;amp; 1
\end{array} \tag{1}
$$
在得到点集中的所有极点后，再对它们进行排序（$$O(n\log(n))$$）就可以得到最终结果。&lt;/p>
&lt;p>极点法虽然能够计算凸包，但还存在问题，其中最不能使人接受的是其较高的时间复杂度，之后将会介绍一些复杂度相对较低的算法。&lt;/p></description></item></channel></rss>